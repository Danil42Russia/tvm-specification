{
  "-ROT": {
    "actual_name": "ROTREV"
  },
  "-ROLL": {
    "actual_name": "BLKSWAP",
    "arguments": ["$args[0]", 1],
    "description": "Permutes two blocks of stack elements, moving the top element to a specified position"
  },
  "FALSE": {
    "actual_name": "PUSHINT_4",
    "arguments": [0],
    "description": "Pushes integer 0 onto the stack, representing boolean false"
  },
  "TRUE": {
    "actual_name": "PUSHINT_4",
    "arguments": [-1],
    "description": "Pushes integer -1 onto the stack, representing boolean true"
  },
  "ONE": {
    "actual_name": "PUSHINT_4",
    "arguments": [1],
    "description": "Pushes integer 1 onto the stack"
  },
  "TWO": {
    "actual_name": "PUSHINT_4",
    "arguments": [2],
    "description": "Pushes integer 2 onto the stack"
  },
  "TEN": {
    "actual_name": "PUSHINT_4",
    "arguments": [10],
    "description": "Pushes integer 10 onto the stack"
  },
  "FIRST": {
    "actual_name": "INDEX",
    "arguments": [0],
    "description": "Returns the first element (index 0) of a tuple"
  },
  "SECOND": {
    "actual_name": "INDEX",
    "arguments": [1],
    "description": "Returns the second element (index 1) of a tuple"
  },
  "THIRD": {
    "actual_name": "INDEX",
    "arguments": [2],
    "description": "Returns the third element (index 2) of a tuple"
  },
  "PUSHROOT": {
    "actual_name": "PUSHCTR",
    "arguments": [4],
    "description": "Pushes the root cell (control register 4) onto the stack"
  },
  "POPROOT": {
    "actual_name": "POPCTR",
    "arguments": [4],
    "description": "Pops a value from the stack into the root cell (control register 4)"
  },
  "SKIPOPTREF": {
    "actual_name": "SKIPDICT",
    "description": "Skips a dictionary or any cell or null in the slice, used for optional references"
  },
  "LDOPTREF": {
    "actual_name": "LDDICT",
    "description": "Loads a dictionary or any cell or null from the slice as an optional reference"
  },
  "PLDOPTREF": {
    "actual_name": "PLDDICT",
    "description": "Preloads a dictionary or any cell or null from the slice as an optional reference"
  },
  "STOPTREF": {
    "actual_name": "STDICT",
    "description": "Stores a dictionary or any cell or null in the builder as an optional reference"
  },
  "PLDREF": {
    "actual_name": "PLDREFIDX",
    "arguments": [0],
    "description": "Preloads the first optional reference from the slice"
  },
  "SETCONTMANY": {
    "actual_name": "SETCONTCTRMANY"
  },
  "LDVARUINT16": {
    "actual_name": "LDGRAMS"
  },
  "STVARUINT16": {
    "actual_name": "STGRAMS"
  },
  "NIL": {
    "actual_name": "TUPLE",
    "arguments": [0],
    "description": "Creates a tuple of zero elements"
  },
  "SINGLE": {
    "actual_name": "TUPLE",
    "arguments": [1],
    "description": "Creates a tuple of one element from the top stack value"
  },
  "PAIR": {
    "actual_name": "TUPLE",
    "arguments": [2],
    "description": "Creates a tuple of two elements from the top two stack values"
  },
  "TRIPLE": {
    "actual_name": "TUPLE",
    "arguments": [3],
    "description": "Creates a tuple of three elements from the top three stack values"
  },
  "CONS": {
    "actual_name": "TUPLE",
    "arguments": [2],
    "description": "Creates a tuple of two elements (cons cell) from the top two stack values"
  },
  "2ROT": {
    "actual_name": "BLKSWAP",
    "arguments": [1, 3],
    "description": "Rotates three pairs of stack elements"
  },
  "ROT2": {
    "actual_name": "BLKSWAP",
    "arguments": [1, 3],
    "description": "Alternative name for 2ROT, rotates three pairs of stack elements"
  },
  "PUSHX": {
    "actual_name": "PICK"
  },
  "-ROLLX": {
    "actual_name": "ROLLREV"
  },
  "NULL": {
    "actual_name": "PUSHNULL"
  },
  "ZERO": {
    "actual_name": "PUSHINT_4",
    "arguments": [0],
    "description": "Pushes integer 0 onto the stack"
  },
  "CHKTUPLE": {
    "actual_name": "UNPACKFIRST",
    "arguments": [0],
    "description": "Checks whether `t` is a _Tuple_. If not, throws a type check exception"
  },
  "SETFIRST": {
    "actual_name": "SETINDEX",
    "arguments": [0],
    "description": "Sets the first component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t'`"
  },
  "SETSECOND": {
    "actual_name": "SETINDEX",
    "arguments": [1],
    "description": "Sets the second component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t'`"
  },
  "SETTHIRD": {
    "actual_name": "SETINDEX",
    "arguments": [2],
    "description": "Sets the third component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t'`"
  },
  "SETFIRSTQ": {
    "actual_name": "SETINDEXQ",
    "arguments": [0],
    "description": "Sets the first component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t'`"
  },
  "SETSECONDQ": {
    "actual_name": "SETINDEXQ",
    "arguments": [1],
    "description": "Sets the second component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t'`"
  },
  "SETTHIRDQ": {
    "actual_name": "SETINDEXQ",
    "arguments": [2],
    "description": "Sets the third component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t'`"
  },
  "UNCONS": {
    "actual_name": "UNTUPLE",
    "arguments": [2],
    "description": "Unpacks a tuple (cons cell) into its two components"
  },
  "UNPAIR": {
    "actual_name": "UNTUPLE",
    "arguments": [2],
    "description": "Unpacks a tuple of two elements into its components"
  },
  "CARQ": {
    "actual_name": "INDEXQ",
    "arguments": [0],
    "description": "Returns the first element of a tuple if it exists, or null if not or the tuple is null"
  },
  "CADR": {
    "actual_name": "INDEX2",
    "description": "Returns `t[1][0]`",
    "arguments": [1, 0]
  },
  "CDDR": {
    "actual_name": "INDEX2",
    "description": "Returns `t[1][1]`",
    "arguments": [1, 1]
  },
  "CADDR": {
    "actual_name": "INDEX3",
    "description": "Returns `t[1][1][0]`",
    "arguments": [1, 1, 0]
  },
  "CDDDR": {
    "actual_name": "INDEX3",
    "description": "Returns `t[1][1][1]`",
    "arguments": [1, 1, 1]
  },
  "FIRSTQ": {
    "actual_name": "INDEXQ",
    "arguments": [1],
    "description": "Returns the first element of a tuple if it exists, or null if not or the tuple is null"
  },
  "CDRQ": {
    "actual_name": "INDEXQ",
    "arguments": [1],
    "description": "Returns the second element of a tuple if it exists, or null if not or the tuple is null"
  },
  "SECONDQ": {
    "actual_name": "INDEXQ",
    "arguments": [1],
    "description": "Returns the second element of a tuple if it exists, or null if not or the tuple is null"
  },
  "COMMA": {
    "actual_name": "TPUSH"
  },
  "INTSORT2": {
    "actual_name": "MINMAX"
  },
  "BCONCAT": {
    "actual_name": "STBR"
  },
  "BCONCATQ": {
    "actual_name": "STBRQ"
  },
  "CALLX": {
    "actual_name": "EXECUTE"
  },
  "RETTRUE": {
    "actual_name": "RET"
  },
  "RETFALSE": {
    "actual_name": "RETALT"
  },
  "BRANCH": {
    "actual_name": "RETBOOL"
  },
  "COMPOSALT": {
    "actual_name": "BOOLOR"
  },
  "COMPOS": {
    "actual_name": "BOOLAND"
  },
  "ISZERO": {
    "actual_name": "EQINT",
    "arguments": [0],
    "description": "Checks whether an integer is zero"
  },
  "ISNEG": {
    "actual_name": "LESSINT",
    "arguments": [0],
    "description": "Checks whether an integer is negative"
  },
  "ISNNEG": {
    "actual_name": "GTINT",
    "arguments": [-1],
    "description": "Checks whether an integer is non-negative"
  },
  "ISNPOS": {
    "actual_name": "LESSINT",
    "arguments": [1],
    "description": "Checks whether an integer is non-positive"
  },
  "ISPOS": {
    "actual_name": "LESSINT",
    "arguments": [0],
    "description": "Checks whether an integer is positive"
  },
  "LEQINT": {
    "actual_name": "LESSINT",
    "arguments": ["$args[0] + 1"],
    "description": "Checks if an integer is less than or equal to a given value"
  },
  "GEQINT": {
    "actual_name": "GTINT",
    "arguments": ["$args[0] - 1"],
    "description": "Checks if an integer is greater than or equal to a given value"
  },
  "ADDCONST": {
    "actual_name": "ADDINT",
    "arguments": ["- $args[0]"],
    "description": "Adds a constant value to an integer"
  },
  "SUBCONST": {
    "actual_name": "ADDINT",
    "arguments": ["- $args[0]"],
    "description": "Subtracts a constant value from an integer"
  },
  "SUBINT": {
    "actual_name": "ADDINT",
    "arguments": ["- $args[0]"],
    "description": "Subtracts one integer from another"
  },
  "CHKBOOL": {
    "actual_name": "FITS",
    "arguments": [1],
    "description": "Checks whether `x` is a \"boolean value\" (i.e., either 0 or -1)"
  },
  "CHKBIT": {
    "actual_name": "UFITS",
    "arguments": [1],
    "description": "Checks whether `x` is a binary digit (i.e., 0 or 1)"
  },
  "STZERO": {
    "actual_name": "STSLICECONST",
    "arguments": ["b{0}"],
    "description": "Stores one binary zero"
  },
  "STONE": {
    "actual_name": "STSLICECONST",
    "arguments": ["b{1}"],
    "description": "Stores one binary one"
  },
  "SLICE": {
    "actual_name": "PUSHSLICE"
  },
  "CONT": {
    "actual_name": "PUSHCONT"
  },
  "CALL": {
    "actual_name": "CALLDICT"
  },
  "JMP": {
    "actual_name": "JMPDICT"
  },
  "PREPARE": {
    "actual_name": "PREPAREDICT"
  },
  "INLINECALL": {
    "actual_name": "none",
    "description": "Instead of a call instruction, the function is inlined into the code"
  },
  "INLINECALLDICT": {
    "actual_name": "none",
    "description": "Instead of a call instruction, the function is inlined into the code"
  },
  "PFXDICTCONSTGETJMP": {
    "actual_name": "PFXDICTSWITCH"
  },
  "PUSHINT": {
    "actual_name": "PUSHINT_LONG",
    "description": "Pushes integer `num` onto the stack."
  },
  "INT": {
    "actual_name": "PUSHINT_LONG",
    "description": "Pushes integer `num` onto the stack."
  },
  "INTX": {
    "actual_name": "PUSHINT_LONG",
    "description": "Pushes integer `num` onto the stack."
  },
  "NEWDICT": {
    "actual_name": "PUSHNULL",
    "description": "Creates a new empty dictionary which is a null value"
  },
  "DICTEMPTY": {
    "actual_name": "ISNULL",
    "description": "Checks whether dictionary is empty, i.e. is null"
  },
  "STDICTS": {
    "actual_name": "STSLICE",
    "description": "Stores the dictionary represented as a slice into _Builder_ `b`"
  },
  "SETNUMARGS": {
    "actual_name": "SETCONTARGS",
    "arguments": [0, "$args[1]"],
    "description": "Sets the number of arguments for a continuation"
  },
  "BLESSNUMARGS": {
    "actual_name": "BLESSARGS",
    "arguments": [0, "$args[1]"],
    "description": "Blesses a continuation with a specified number of arguments"
  },
  "DUMPTOSFMT": {
    "actual_name": "DEBUGSTR"
  },
  "LOGSTR": {
    "actual_name": "DEBUGSTR"
  },
  "PRINTSTR": {
    "actual_name": "DEBUGSTR"
  },
  "SAVEBOTH": {
    "actual_name": "SAVEBOTHCTR"
  },
  "SAVEALT": {
    "actual_name": "SAVEALTCTR"
  },
  "SAVE": {
    "actual_name": "SAVECTR"
  },
  "SETCONT": {
    "actual_name": "SETCONTCTR"
  },
  "POPCTRSAVE": {
    "actual_name": "POPSAVE"
  },
  "HASHEXT_SHA256": {
    "actual_name": "HASHEXT",
    "arguments": [0],
    "description": "Calculates and returns `SHA-256` hash of the concatenation of slices or builders `s_1`...`s_length`"
  },
  "HASHEXT_SHA512": {
    "actual_name": "HASHEXT",
    "arguments": [1],
    "description": "Calculates and returns `SHA-512` hash of the concatenation of slices or builders `s_1`...`s_length`"
  },
  "HASHEXT_BLAKE2B": {
    "actual_name": "HASHEXT",
    "arguments": [2],
    "description": "Calculates and returns `BLAKE2B` hash of the concatenation of slices or builders `s_1`...`s_length`"
  },
  "HASHEXT_KECCAK256": {
    "actual_name": "HASHEXT",
    "arguments": [3],
    "description": "Calculates and returns `KECCAK-256` hash of the concatenation of slices or builders `s_1`...`s_length`"
  },
  "HASHEXT_KECCAK512": {
    "actual_name": "HASHEXT",
    "arguments": [4],
    "description": "Calculates and returns `KECCAK-512` hash of the concatenation of slices or builders `s_1`...`s_length`"
  },
  "HASHEXTR_SHA256": {
    "actual_name": "HASHEXTR",
    "arguments": [0],
    "description": "Calculates and returns ` SHA-256` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order"
  },
  "HASHEXTR_SHA512": {
    "actual_name": "HASHEXTR",
    "arguments": [1],
    "description": "Calculates and returns ` SHA-512` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order"
  },
  "HASHEXTR_BLAKE2B": {
    "actual_name": "HASHEXTR",
    "arguments": [2],
    "description": "Calculates and returns ` BLAKE2B` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order"
  },
  "HASHEXTR_KECCAK256": {
    "actual_name": "HASHEXTR",
    "arguments": [3],
    "description": "Calculates and returns ` KECCAK-256` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order"
  },
  "HASHEXTR_KECCAK512": {
    "actual_name": "HASHEXTR",
    "arguments": [4],
    "description": "Calculates and returns ` KECCAK-512` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order"
  },
  "HASHEXTA_SHA256": {
    "actual_name": "HASHEXTA",
    "arguments": [0],
    "description": "Calculates `SHA-256` hash of the concatenation of slices (or builders) `s_1`...`s_length` and appends the resulting hash to a builder `b`"
  },
  "HASHEXTA_SHA512": {
    "actual_name": "HASHEXTA",
    "arguments": [1],
    "description": "Calculates `SHA-512` hash of the concatenation of slices (or builders) `s_1`...`s_length` and appends the resulting hash to a builder `b`"
  },
  "HASHEXTA_BLAKE2B": {
    "actual_name": "HASHEXTA",
    "arguments": [2],
    "description": "Calculates `BLAKE2B` hash of the concatenation of slices (or builders) `s_1`...`s_length` and appends the resulting hash to a builder `b`"
  },
  "HASHEXTA_KECCAK256": {
    "actual_name": "HASHEXTA",
    "arguments": [3],
    "description": "Calculates `KECCAK-256` hash of the concatenation of slices (or builders) `s_1`...`s_length` and appends the resulting hash to a builder `b`"
  },
  "HASHEXTA_KECCAK512": {
    "actual_name": "HASHEXTA",
    "arguments": [4],
    "description": "Calculates `KECCAK-512` hash of the concatenation of slices (or builders) `s_1`...`s_length` and appends the resulting hash to a builder `b`"
  },
  "HASHEXTAR_SHA256": {
    "actual_name": "HASHEXTAR",
    "arguments": [0],
    "description": "Calculates and returns `SHA-256` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order and appends the resulting hash to a builder `b`"
  },
  "HASHEXTAR_SHA512": {
    "actual_name": "HASHEXTAR",
    "arguments": [1],
    "description": "Calculates and returns `SHA-512` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order and appends the resulting hash to a builder `b`"
  },
  "HASHEXTAR_BLAKE2B": {
    "actual_name": "HASHEXTAR",
    "arguments": [2],
    "description": "Calculates and returns `BLAKE2B` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order and appends the resulting hash to a builder `b`"
  },
  "HASHEXTAR_KECCAK256": {
    "actual_name": "HASHEXTAR",
    "arguments": [3],
    "description": "Calculates and returns `KECCAK-256` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order and appends the resulting hash to a builder `b`"
  },
  "HASHEXTAR_KECCAK512": {
    "actual_name": "HASHEXTAR",
    "arguments": [4],
    "description": "Calculates and returns `KECCAK-512` hash of the concatenation of slices or builders `s_1`...`s_length` in reverse order and appends the resulting hash to a builder `b`"
  }
}
