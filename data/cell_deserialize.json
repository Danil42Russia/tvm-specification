{
  "CTOS": {
    "description": {
      "short": "Converts a _Cell_ into a _Slice_.",
      "long": "`c` must be either an ordinary cell, or an exotic cell. If cell is exotic, it is automatically loaded to yield an ordinary cell `c'` and converted into a _Slice_ afterwards.",
      "tags": [],
      "operands": [],
      "exit_codes": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "BTOS": {
    "description": {
      "short": "Converts a _Builder_ into a _Slice_.",
      "long": "This instruction is equivalent to `ENDC`, `CTOS` without extra gas for intermediate Cell creation.",
      "tags": [],
      "operands": [],
      "exit_codes": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["ENDC", "CTOS"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "b",
            "value_types": ["Builder"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "ENDS": {
    "description": {
      "short": "Removes a _Slice_ `s` from the stack. Throws an exception if it is not empty.",
      "long": "",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice is not empty."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "NEWC",
              "comment": "Create an empty builder"
            },
            {
              "instruction": "ENDC",
              "comment": "Convert builder to cell"
            },
            {
              "instruction": "CTOS",
              "comment": "Convert cell to slice (empty slice)"
            },
            {
              "instruction": "ENDS",
              "comment": "Remove the empty slice from the stack"
            }
          ],
          "stack": {
            "input": ["Slice{empty}"],
            "output": []
          }
        },
        {
          "instructions": [
            {
              "instruction": "PUSHINT_16 123"
            },
            {
              "instruction": "NEWC"
            },
            {
              "instruction": "STU 8",
              "comment": "Store 123 as an 8-bit unsigned integer"
            },
            {
              "instruction": "ENDC"
            },
            {
              "instruction": "CTOS",
              "comment": "Convert to slice (non-empty slice)"
            },
            {
              "instruction": "ENDS",
              "comment": "Try to remove a non-empty slice"
            }
          ],
          "exit_code": 9,
          "stack": {
            "input": ["Slice{123}"],
            "output": ["Slice{123}"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDREF": {
    "description": {
      "short": "",
      "long": "Loads a cell reference `c` from `s` and returns the remainder of `s` as `s''`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain any references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDREFRTOS": {
    "description": {
      "short": "",
      "long": "Loads a cell reference `c` from `s`, converts it to _Slice_ and returns that _Slice_ and remainder of `s` as `s''`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain any references."
        }
      ],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["LDREF", "SWAP", "CTOS"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "loaded",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDCUTFIRST": {
    "description": {
      "short": "",
      "long": "Returns the first `length` bits of `s`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits."
        }
      ],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["PLDSLICEX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDSKIPFIRST": {
    "description": {
      "short": "",
      "long": "Returns all but the first `length` bits of `s`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits."
        }
      ],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDSLICEX", "NIP"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDCUTLAST": {
    "description": {
      "short": "",
      "long": "Returns the last `length` bits of `s`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDSKIPLAST": {
    "description": {
      "short": "",
      "long": "Returns all but the last `length` bits of `s`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDSUBSTR": {
    "description": {
      "short": "",
      "long": "Returns `length` bits of `s` starting from `offset`, thus extracting a bit substring out of the data of `s`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "offset",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SCUTFIRST": {
    "description": {
      "short": "",
      "long": "Returns the first `length` bits and first `refs` references of `s`.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits or references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SSKIPFIRST": {
    "description": {
      "short": "",
      "long": "Returns all but the first `length` bits of `s` and `refs` references of `s`.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits or references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SCUTLAST": {
    "description": {
      "short": "",
      "long": "Returns the last `length` data bits and last `refs` references of `s`.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits or references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SSKIPLAST": {
    "description": {
      "short": "",
      "long": "Returns all but the last `length` bits of `s` and `refs` references of `s`.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits or references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SUBSLICE": {
    "description": {
      "short": "",
      "long": "Returns `length` bits and `refs` references from _Slice_ `s`, after skipping the first `skip_len` bits and first `skip_refs` references.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits or references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "skip_len",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "skip_refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SPLIT": {
    "description": {
      "short": "",
      "long": "Splits the first `length` data bits and first `refs` references from `s` into `s'`, returning the remainder of `s` as `s''`.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits or references."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s''",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SPLITQ": {
    "description": {
      "short": "",
      "long": "Splits the first `length` data bits and first `refs` references from `s` into `s'`, returning the remainder of `s` as `s''`. This is a quiet version of `SPLIT` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          },
          {
            "type": "simple",
            "name": "refs",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 4
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "s''",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "XCTOS": {
    "description": {
      "short": "",
      "long": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "flag",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "XLOAD": {
    "description": {
      "short": "",
      "long": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Failed to load exotic cell."
        },
        {
          "errno": "9",
          "condition": "Unexpected special cell type."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "XLOADQ": {
    "description": {
      "short": "",
      "long": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, returns 0.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SCHKBITS": {
    "description": {
      "short": "",
      "long": "Checks whether there are at least `length` data bits in _Slice_ `s`. If this is not the case, throws a cell deserialisation (i.e., cell underflow) exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SCHKREFS": {
    "description": {
      "short": "",
      "long": "Checks whether there are at least `r` references in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SCHKBITREFS": {
    "description": {
      "short": "",
      "long": "Checks whether there are at least `length` data bits and `r` references in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SCHKBITSQ": {
    "description": {
      "short": "",
      "long": "Checks whether there are at least `length` data bits in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SCHKREFSQ": {
    "description": {
      "short": "",
      "long": "Checks whether there are at least `r` references in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SCHKBITREFSQ": {
    "description": {
      "short": "",
      "long": "Checks whether there are at least `length` data bits and `r` references in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDREFVAR": {
    "description": {
      "short": "",
      "long": "Preloads the `n`-th cell reference of _Slice_ `s`.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "SBITS": {
    "description": {
      "short": "",
      "long": "Returns the number of data bits in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SREFS": {
    "description": {
      "short": "",
      "long": "Returns the number of references in _Slice_ `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SBITREFS": {
    "description": {
      "short": "",
      "long": "Returns both the number of data bits and the number of references in `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "length",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDZEROES": {
    "description": {
      "short": "",
      "long": "Returns the count `n` of leading zero bits in `s`, and removes these bits from `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDONES": {
    "description": {
      "short": "",
      "long": "Returns the count `n` of leading one bits in `s`, and removes these bits from `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDSAME": {
    "description": {
      "short": "",
      "long": "Returns the count `n` of leading bits equal to `x` (0 or 1) in `s`, and removes these bits from `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDEPTH": {
    "description": {
      "short": "",
      "long": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x == 0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CDEPTH": {
    "description": {
      "short": "",
      "long": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x == 0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CLEVEL": {
    "description": {
      "short": "",
      "long": "Returns level of the cell.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cell",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "level",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CLEVELMASK": {
    "description": {
      "short": "",
      "long": "Returns level mask of the cell.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cell",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "level_mask",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CHASHIX": {
    "description": {
      "short": "",
      "long": "Returns `i`-th hash of the cell.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cell",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "hash",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CDEPTHIX": {
    "description": {
      "short": "",
      "long": "Returns `i`-th depth of the cell.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cell",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "depth",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDGRAMS": {
    "description": {
      "short": "",
      "long": "Loads a `Gram` or `VarUInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.",
      "tags": ["variable-size integer", "slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Cannot deserialize a variable-length integer."
        }
      ],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDU 4", "SWAP", "LSHIFT 3", "LDUX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDVARINT16": {
    "description": {
      "short": "",
      "long": "Loads a `VarInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit signed big-endian representation of `x`.",
      "tags": ["variable-size integer", "slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Cannot deserialize a variable-length integer."
        }
      ],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDU 4", "SWAP", "LSHIFT 3", "LDIX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDVARUINT32": {
    "description": {
      "short": "",
      "long": "Loads a `VarUInteger 32` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 5-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.",
      "tags": ["variable-size integer", "slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Cannot deserialize a variable-length integer."
        }
      ],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDU 4", "SWAP", "LSHIFT 3", "LDUX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDVARINT32": {
    "description": {
      "short": "",
      "long": "Loads a `VarInteger 32` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 5-bit unsigned big-endian integer `l`, followed by an `8l`-bit signed big-endian representation of `x`.",
      "tags": ["variable-size integer", "slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Cannot deserialize a variable-length integer."
        }
      ],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDU 5", "SWAP", "LSHIFT 3", "LDIX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDMSGADDR": {
    "description": {
      "short": "",
      "long": "Loads a valid `MsgAddress` from _Slice_ `s` and pushes the loaded `addr` value onto the stack along with _Slice_ `s'` with the remaining data.",
      "tags": ["address", "slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Cannot load a MsgAddress."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "addr",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDMSGADDRQ": {
    "description": {
      "short": "",
      "long": "Loads a valid `MsgAddress` from _Slice_ `s` and pushes the loaded `addr` value onto the stack along with _Slice_ `s'` with the remaining data. This is a quiet version of `LDMSGADDR` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["address", "slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "addr",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDIX": {
    "description": {
      "short": "",
      "long": "Loads a signed `width`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice doesn't contain enough bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 257
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDUX": {
    "description": {
      "short": "",
      "long": "Loads an unsigned `width`-bit integer `x` from (the first `width` bits of) `s`.",
      "tags": ["slice parsing"],
      "operands": [],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice doesn't contain enough bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 256
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "PLDIX": {
    "description": {
      "short": "",
      "long": "Preloads a signed `width`-bit integer from _Slice_ `s`.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 257
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDUX": {
    "description": {
      "short": "",
      "long": "Preloads an unsigned `width`-bit integer from `s`.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 256
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDIXQ": {
    "description": {
      "short": "",
      "long": "Loads a signed `width`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`. This is a quiet version of `LDIX` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 257
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDUXQ": {
    "description": {
      "short": "",
      "long": "Loads an unsigned `width`-bit integer `x` from (the first `width` bits of) `s`. This is a quiet version of `LDUX` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 256
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDIXQ": {
    "description": {
      "short": "",
      "long": "Preloads a signed `width`-bit integer from _Slice_ `s`. This is a quiet version of `PLDIX` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 257
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDUXQ": {
    "description": {
      "short": "",
      "long": "Preloads an unsigned `width`-bit integer from `s`. This is a quiet version of `PLDUX` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 256
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDSLICEX": {
    "description": {
      "short": "",
      "long": "Loads the first `width` bits from _Slice_ `s` into a separate _Slice_ `loaded`, returning the remainder of `s` as `s'`.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "loaded",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "PLDSLICEX": {
    "description": {
      "short": "",
      "long": "Preloads the first `width` bits of `s` as `loaded`.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "loaded",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDSLICEXQ": {
    "description": {
      "short": "",
      "long": "Loads the first `width` bits from _Slice_ `s` into a separate _Slice_ `loaded`, returning the remainder of `s` as `s'`. This is a quiet version of `LDSLICEX` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "loaded",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDSLICEXQ": {
    "description": {
      "short": "",
      "long": "Preloads the first `width` bits of `s` as `loaded`. This is a quiet version of `PLDSLICEX` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDILE4": {
    "description": {
      "short": "",
      "long": "Loads a little-endian signed 32-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDULE4": {
    "description": {
      "short": "",
      "long": "Loads a little-endian unsigned 32-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDILE8": {
    "description": {
      "short": "",
      "long": "Loads a little-endian signed 64-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDULE8": {
    "description": {
      "short": "",
      "long": "Loads a little-endian unsigned 64-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "PLDILE4": {
    "description": {
      "short": "",
      "long": "Preloads a little-endian signed 32-bit integer.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDULE4": {
    "description": {
      "short": "",
      "long": "Preloads a little-endian unsigned 32-bit integer.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDILE8": {
    "description": {
      "short": "",
      "long": "Preloads a little-endian signed 64-bit integer.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDULE8": {
    "description": {
      "short": "",
      "long": "Preloads a little-endian unsigned 64-bit integer.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDILE4Q": {
    "description": {
      "short": "",
      "long": "Quietly loads a little-endian signed 32-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDULE4Q": {
    "description": {
      "short": "",
      "long": "Quietly loads a little-endian unsigned 32-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDILE8Q": {
    "description": {
      "short": "",
      "long": "Quietly loads a little-endian signed 64-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDULE8Q": {
    "description": {
      "short": "",
      "long": "Quietly loads a little-endian unsigned 64-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDILE4Q": {
    "description": {
      "short": "",
      "long": "Quietly preloads a little-endian signed 32-bit integer.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDULE4Q": {
    "description": {
      "short": "",
      "long": "Quietly preloads a little-endian unsigned 32-bit integer.",
      "tags": ["slice parsing", "preload"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDILE8Q": {
    "description": {
      "short": "",
      "long": "Quietly preloads a little-endian signed 64-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDULE8Q": {
    "description": {
      "short": "",
      "long": "Quietly preloads a little-endian unsigned 64-bit integer.",
      "tags": ["slice parsing"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDREFIDX": {
    "description": {
      "short": "",
      "long": "Preloads the `n`-th cell reference of _Slice_ `s`.",
      "tags": ["slice parsing"],
      "operands": ["n"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "CHASHI": {
    "description": {
      "short": "",
      "long": "Returns `i`-th hash of the cell.",
      "tags": [],
      "operands": ["n"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cell",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "hash",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CDEPTHI": {
    "description": {
      "short": "",
      "long": "Returns `i`-th depth of the cell.",
      "tags": [],
      "operands": ["n"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cell",
            "value_types": ["Cell"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "depth",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDI": {
    "description": {
      "short": "",
      "long": "Preloads a signed `width`-bit integer from _Slice_ `s`.",
      "tags": ["slice parsing", "preload"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDU": {
    "description": {
      "short": "",
      "long": "Preloads an unsigned `width`-bit integer from `s`.",
      "tags": ["slice parsing", "preload"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDIQ": {
    "description": {
      "short": "",
      "long": "Loads a signed `width`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data. This is a quiet version of `LDI` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDUQ": {
    "description": {
      "short": "",
      "long": "Loads an unsigned `width`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data. This is a quiet version of `LDU` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDIQ": {
    "description": {
      "short": "",
      "long": "Preloads a signed `width`-bit integer from _Slice_ `s`. This is a quiet version of `PLDI` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing", "preload"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDUQ": {
    "description": {
      "short": "",
      "long": "Preloads an unsigned `width`-bit integer from `s`. This is a quiet version of `PLDU` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing", "preload"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDUZ": {
    "description": {
      "short": "",
      "long": "Preloads the first `32 * (c + 1)` bits of _Slice_ `s` into an unsigned integer `x`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions.",
      "tags": ["slice parsing", "preload"],
      "operands": ["c"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDSLICE": {
    "description": {
      "short": "",
      "long": "Preloads the first `width` bits of `s` as `loaded`.",
      "tags": ["slice parsing", "preload"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "loaded",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDSLICEQ": {
    "description": {
      "short": "",
      "long": "Cuts the next `width` bits of `s` into a separate _Slice_ `loaded`. This is a quiet version of `LDSLICE` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "loaded",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDSLICEQ": {
    "description": {
      "short": "",
      "long": "Preloads the first `width` bits of `s` as `loaded`. This is a quiet version of `PLDSLICE` which means that instead of throwing an exception, it pushes a status flag to the stack: 0 if the operation fails, -1 if the operation succeeds.",
      "tags": ["slice parsing", "preload"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "loaded",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SDBEGINSX": {
    "description": {
      "short": "",
      "long": "Checks whether `s` begins with (the data bits of) `search`, and removes `search` from `s` on success. On failure throws a cell deserialization exception. Primitive `SDPFXREV` can be considered a quiet version of `SDBEGINSX`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "search",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDBEGINSXQ": {
    "description": {
      "short": "",
      "long": "Checks whether `s` begins with (the data bits of) `search`, and removes `search` from `s` on success. This is a quiet version of `SDBEGINSX` which means it pushes a status flag onto the stack: 0 if `s` does not begin with `search`, -1 if it does.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "search",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SDBEGINS": {
    "description": {
      "short": "",
      "long": "Checks whether `s` begins with constant bitstring `search` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `search` from `s` on success.",
      "tags": [],
      "operands": ["search"],
      "exit_codes": [
        {
          "errno": "6",
          "condition": "Not enough data bits for a SDBEGINS instruction."
        },
        {
          "errno": "9",
          "condition": "Slice does not begin with expected data bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "SDBEGINSQ": {
    "description": {
      "short": "",
      "long": "Checks whether `s` begins with constant bitstring `search` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `search` from `s` on success. This is a quiet version of `SDBEGINS` which means it pushes a status flag onto the stack: 0 if `s` does not begin with `search`, -1 if it does.",
      "tags": [],
      "operands": ["search"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s'",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LDI": {
    "description": {
      "short": "Loads a signed `width`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data.",
      "long": "",
      "tags": ["slice parsing"],
      "operands": ["width"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        },
        {
          "errno": "7",
          "condition": "Top element is not an Int."
        },
        {
          "errno": "7",
          "condition": "Second element is not a Slice."
        },
        {
          "errno": "9",
          "condition": "Slice doesn't contain enough bits."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 -1"
            },
            {
              "instruction": "NEWC"
            },
            {
              "instruction": "STI 4",
              "comment": "store -1 as signed 4-bit number"
            },
            {
              "instruction": "ENDC"
            },
            {
              "instruction": "CTOS",
              "comment": "convert Cell to Slice"
            },
            {
              "instruction": "LDI 4",
              "comment": "load previously stored 4-bit number"
            }
          ],
          "stack": {
            "input": ["Slice{-1}"],
            "output": ["Slice{empty}", "-1"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDI_ALT": {
    "description": {
      "short": "",
      "long": "Loads a signed `width`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data. This is a longer encoding of `LDI`.",
      "tags": ["slice parsing"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDU": {
    "description": {
      "short": "Loads an unsigned `width`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data.",
      "long": "",
      "tags": ["slice parsing"],
      "operands": ["width"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        },
        {
          "errno": "7",
          "condition": "Top element is not an Int."
        },
        {
          "errno": "7",
          "condition": "Second element is not a Slice."
        },
        {
          "errno": "9",
          "condition": "Slice doesn't contain enough bits."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 10"
            },
            {
              "instruction": "NEWC"
            },
            {
              "instruction": "STU 4",
              "comment": "store 10 as unsigned 4-bit number"
            },
            {
              "instruction": "ENDC"
            },
            {
              "instruction": "CTOS",
              "comment": "convert Cell to Slice"
            },
            {
              "instruction": "LDU 4",
              "comment": "load previously stored 4-bit number"
            }
          ],
          "stack": {
            "input": ["Slice{10}"],
            "output": ["Slice{empty}", "10"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDU_ALT": {
    "description": {
      "short": "",
      "long": "Loads an unsigned `width`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data. This is a longer encoding of `LDU`.",
      "tags": ["slice parsing"],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDSLICE": {
    "description": {
      "short": "",
      "long": "Cuts the next `count` bits of `s` into a separate _Slice_ `loaded`.",
      "tags": ["slice parsing"],
      "operands": ["count"],
      "exit_codes": [
        {
          "errno": "9",
          "condition": "Slice does not contain enough bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "loaded",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDSLICE_ALT": {
    "description": {
      "short": "",
      "long": "Cuts the next `c + 1` bits of `s` into a separate _Slice_ `loaded`. This is a longer encoding of `LDSLICE`.",
      "tags": ["slice parsing"],
      "operands": ["c"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "loaded",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  }
}
