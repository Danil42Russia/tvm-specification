{
  "SEMPTY": {
    "description": {
      "short": "",
      "long": "Checks whether a _Slice_ `s` is empty (i.e., contains no bits of data and no cell references).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDEMPTY": {
    "description": {
      "short": "",
      "long": "Checks whether _Slice_ `s` has no bits of data.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SREMPTY": {
    "description": {
      "short": "",
      "long": "Checks whether _Slice_ `s` has no references.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDFIRST": {
    "description": {
      "short": "",
      "long": "Checks whether the first bit of _Slice_ `s` is a one.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDLEXCMP": {
    "description": {
      "short": "",
      "long": "Compares the data of `s` lexicographically with the data of `s'`, returning `-1`, 0, or 1 depending on the result.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SDEQ": {
    "description": {
      "short": "",
      "long": "Checks if the data parts of `s` and `s'` are bitwise equal.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["SDLEXCMP", "ISZERO"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDPFX": {
    "description": {
      "short": "",
      "long": "Checks whether `prefix` is a prefix of `s`.",
      "tags": [],
      "operands": [],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHSLICE b{1001}",
              "comment": "prefix"
            },
            {
              "instruction": "PUSHSLICE b{10010}",
              "comment": "where to search (s)"
            },
            {
              "instruction": "SDPFX",
              "is_main": true
            }
          ],
          "stack": {
            "input": [],
            "output": ["-1"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "prefix",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDPFXREV": {
    "description": {
      "short": "",
      "long": "Checks whether `prefix` is a prefix of `s`. Same as `SDPFX`, but with arguments in a reverse order.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["SWAP", "SDPFX"]
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHSLICE b{10010}",
              "comment": "where to search (s)"
            },
            {
              "instruction": "PUSHSLICE b{1001}",
              "comment": "prefix"
            },
            {
              "instruction": "SDPFXREV",
              "is_main": true
            }
          ],
          "stack": {
            "input": [],
            "output": ["-1"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "prefix",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDPPFX": {
    "description": {
      "short": "",
      "long": "Checks whether `prefix` is a proper prefix of `s` (i.e., a prefix distinct from `s`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "prefix",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDPPFXREV": {
    "description": {
      "short": "",
      "long": "Checks whether `prefix` is a proper prefix of `s` (i.e., a prefix distinct from `s`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "prefix",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDSFX": {
    "description": {
      "short": "",
      "long": "Checks whether `suffix` is a suffix of `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "suffix",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDSFXREV": {
    "description": {
      "short": "",
      "long": "Checks whether `suffix` is a suffix of `s`. Same as `SDSFX`, but with arguments in a reverse order.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "suffix",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDPSFX": {
    "description": {
      "short": "",
      "long": "Checks whether `suffix` is a proper suffix of `s` (i.e., a suffix distinct from `s`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "suffix",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDPSFXREV": {
    "description": {
      "short": "",
      "long": "Checks whether `suffix` is a proper suffix of `s` (i.e., a suffix distinct from `s`). Same as `SDPSFX`, but with arguments in a reverse order.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "suffix",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Bool"]
          }
        ]
      }
    }
  },
  "SDCNTLEAD0": {
    "description": {
      "short": "",
      "long": "Returns the number of leading zeroes in `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SDCNTLEAD1": {
    "description": {
      "short": "",
      "long": "Returns the number of leading ones in `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SDCNTTRAIL0": {
    "description": {
      "short": "",
      "long": "Returns the number of trailing zeroes in `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "SDCNTTRAIL1": {
    "description": {
      "short": "",
      "long": "Returns the number of trailing ones in `s`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  }
}
