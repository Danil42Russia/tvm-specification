{
  "EXECUTE": {
    "description": {
      "short": "",
      "long": "_Calls_ or _executes_, continuation `c` from the stack. After the call old `cc` is restored and execution continues.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                }
              }
            }
          }
        }
      ]
    }
  },
  "JMPX": {
    "description": {
      "short": "",
      "long": "_Jumps_, or transfers control, to continuation `c` from the stack.\nThe remainder of the previous current continuation `cc` is discarded.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "RET": {
    "description": {
      "short": "",
      "long": "_Returns_ to the continuation from `c0`. The remainder of the current continuation `cc` is discarded.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["PUSHCTR c0", "JMPX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 0
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "register",
          "index": 0
        }
      ]
    }
  },
  "RETALT": {
    "description": {
      "short": "",
      "long": "_Returns_ to the continuation from `c1`. The remainder of the current continuation `cc` is discarded.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["PUSHCTR c1", "JMPX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 1
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "register",
          "index": 1
        }
      ]
    }
  },
  "RETBOOL": {
    "description": {
      "short": "",
      "long": "Pop `cond` from the stack and perform a `RET` or `RETALT` depending on the value of `cond` (-1 for `RET`, 0 for `RETALT`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Bool"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 0
          },
          {
            "type": "constant",
            "index": 1
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "CALLCC": {
    "description": {
      "short": "",
      "long": "_Call with current continuation_, transfers control to `c` from the stack, pushing the old value of `cc` into `c`'s stack (instead of discarding it or writing it into new `c0`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "JMPXDATA": {
    "description": {
      "short": "",
      "long": "_Transfers control_ to continuation `c` from the stack, converting the remainder of the current continuation (the old value of `cc`) into a _Slice_ before pushing it onto the stack of `c`. Unlike `CALLCC` which pushes the old continuation as is, this instruction converts it to a _Slice_ first.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "CALLXVARARGS": {
    "description": {
      "short": "",
      "long": "_Calls_ continuation `c` with parameters and expected return values, but unlike `CALLXARGS` which takes these values from the instruction itself, this instruction takes `p` and `r` from the stack. Here `p` represents the number of parameters to pass to the continuation, and `r` represents the number of expected return values.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          },
          {
            "type": "simple",
            "name": "p",
            "value_types": ["Int"],
            "range": {
              "min": -1,
              "max": 254
            }
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"],
            "range": {
              "min": -1,
              "max": 254
            }
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                }
              }
            }
          }
        }
      ]
    }
  },
  "RETVARARGS": {
    "description": {
      "short": "",
      "long": "_Returns_ to the continuation at `c0`, but unlike `RETARGS` which takes the number of return values from the instruction itself, this instruction takes the number of return values `r` from the stack. The top `r` values from the current stack are passed as return values to `c0`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "p",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 255
            }
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                }
              }
            }
          }
        }
      ]
    }
  },
  "JMPXVARARGS": {
    "description": {
      "short": "",
      "long": "_Jumps_ to continuation `c`, but unlike `JMPXARGS` which takes the number of parameters from the instruction itself, this instruction takes the number of parameters `p` from the stack. Only the top `p` values from the current stack are passed to the continuation, and the remainder of the current stack is discarded. The remainder of the current continuation is also discarded.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          },
          {
            "type": "simple",
            "name": "p",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 254
            }
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "CALLCCVARARGS": {
    "description": {
      "short": "",
      "long": "_Calls_ continuation `c` with parameters and pushes the old value of the current continuation, but unlike `CALLCCARGS` which takes the number of parameters and return values from the instruction itself, this instruction takes `p` and `r` from the stack. The old value of the current continuation `cc` (along with the top `p` values from the original stack) is pushed onto the stack of the newly-invoked continuation `c`, setting `cc.nargs` to `r`. This allows the called continuation to later return to the caller with the specified number of return values.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          },
          {
            "type": "simple",
            "name": "p",
            "value_types": ["Int"],
            "range": {
              "min": -1,
              "max": 254
            }
          },
          {
            "type": "simple",
            "name": "r",
            "value_types": ["Int"],
            "range": {
              "min": -1,
              "max": 254
            }
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "RETDATA": {
    "description": {
      "short": "",
      "long": "Returns to the continuation at `c0`, converting the remainder of the current continuation into a _Slice_ and pushing it onto the stack of `c0`.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["PUSHCTR c0", "JMPXDATA"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 0
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "prev_cc",
            "value_types": ["Slice"]
          }
        ],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "register",
          "index": 0
        }
      ]
    }
  },
  "RUNVMX": {
    "description": {
      "short": "Runs child VM with `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags taken from the stack.",
      "long": "Flags:\n\n- **+1** — same_c3 (set c3 to code)\n- **+2** — push_0 (push an implicit 0 before running the code); only works with +1 enabled\n- **+4** — load c4 (persistent data) from stack and return its final value\n- **+8** — load gas limit from stack and return consumed gas\n- **+16** — load c7 (smart-contract context)\n- **+32** — return c5 (actions)\n- **+64** — pop hard gas limit (enabled by ACCEPT) from stack as well\n- **+128** — isolated gas consumption (separate set of visited cells, reset chksgn counter)\n- **+256** — pop number N, return exactly N values from stack (only if res=0 or 1; if not enough then res=stk_und)",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "flags",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "CALLCCARGS": {
    "description": {
      "short": "",
      "long": "_Calls_ continuation `c` with `p` parameters, but unlike `CALLXARGS` which only passes parameters, this instruction also pushes the old value of the current continuation `cc` (along with the top `p` values from the original stack) onto the stack of newly-invoked continuation `c`, setting `cc.nargs` to `r`. This allows the called continuation to later return to the caller with the specified number of return values.",
      "tags": [],
      "operands": ["p", "r"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "JMPXARGS": {
    "description": {
      "short": "",
      "long": "_Jumps_ to continuation `c`, passing only the top `p` values from the current stack to it, the remainder of the current stack is discarded.",
      "tags": [],
      "operands": ["p"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "RETARGS": {
    "description": {
      "short": "",
      "long": "_Returns_ to `c0`, with `r` return values taken from the current stack.",
      "tags": [],
      "operands": ["r"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "r",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 0
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "register",
          "index": 0
        }
      ]
    }
  },
  "CALLREF": {
    "description": {
      "short": "",
      "long": "Calls the continuation stored in cell reference `ref`.",
      "tags": [],
      "operands": ["ref"],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["PUSHREFCONT", "EXECUTE"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                }
              }
            }
          }
        }
      ]
    }
  },
  "JMPREF": {
    "description": {
      "short": "",
      "long": "Jumps to the continuation stored in cell reference `c`.",
      "tags": [],
      "operands": ["c"],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["PUSHREFCONT", "JMPX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "JMPREFDATA": {
    "description": {
      "short": "",
      "long": "Jumps to the continuation stored in cell reference `c`, converting the remainder of the current continuation into a _Slice_ before pushing it onto the stack of `c`.",
      "tags": [],
      "operands": ["c"],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["PUSHREFCONT", "JMPXDATA"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c"
        }
      ]
    }
  },
  "RUNVM": {
    "description": {
      "short": "Runs child VM with `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags.",
      "long": "Flags:\n\n- **+1** — same_c3 (set c3 to code)\n- **+2** — push_0 (push an implicit 0 before running the code); only works with +1 enabled\n- **+4** — load c4 (persistent data) from stack and return its final value\n- **+8** — load gas limit from stack and return consumed gas\n- **+16** — load c7 (smart-contract context)\n- **+32** — return c5 (actions)\n- **+64** — pop hard gas limit (enabled by ACCEPT) from stack as well\n- **+128** — isolated gas consumption (separate set of visited cells, reset chksgn counter)\n- **+256** — pop number N, return exactly N values from stack (only if res=0 or 1; if not enough then res=stk_und)",
      "tags": [],
      "operands": ["flags"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "CALLXARGS": {
    "description": {
      "short": "",
      "long": "_Calls_ continuation `c` with `p` parameters, expecting an arbitrary number of return values.",
      "tags": [],
      "operands": ["p"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ],
        "registers": []
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                }
              }
            }
          }
        }
      ]
    }
  },
  "CALLXARGS_1": {
    "description": {
      "short": "",
      "long": "_Calls_ continuation `c` with `p` parameters and expecting `r` return values.",
      "tags": [],
      "operands": ["p", "r"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Continuation"]
          }
        ],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  }
}
