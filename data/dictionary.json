{
  "STDICT": {
    "description": {
      "short": "",
      "long": "Stores dictionary `D` into _Builder_ `b`, returing the resulting _Builder_ `b'`.\nIn other words, if `D` is a cell, performs `STONE` and `STREF`; if `D` is _Null_, performs `NIP` and `STZERO`.",
      "operands": [],
      "exit_codes": [
        {
          "errno": "7",
          "condition": "Second element is not a `Cell` or `Null`."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "b",
            "value_types": ["Builder"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "b'",
            "value_types": ["Builder"]
          }
        ]
      }
    }
  },
  "SKIPDICT": {
    "description": {
      "short": "",
      "long": "Loads a dictionary and discards its value.",
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDDICT", "NIP"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s2",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDDICTS": {
    "description": {
      "short": "",
      "long": "Loads a (_Slice_-represented) dictionary `s'` from _Slice_ `s`, and returns the remainder of `s` as `s'`.\nThis is a 'split function' for all `HashmapE(n,X)` dictionary types.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s'",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "PLDDICTS": {
    "description": {
      "short": "",
      "long": "Preloads a (_Slice_-represented) dictionary `s'` from _Slice_ `s`.",
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDDICTS", "DROP"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s2",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "LDDICT": {
    "description": {
      "short": "",
      "long": "Loads a dictionary `D` from _Slice_ `s`, and returns the remainder of `s` as `s'`. May be applied to dictionaries or to values of arbitrary `(^Y)?` types.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "s2",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "PLDDICT": {
    "description": {
      "short": "",
      "long": "Preloads a dictionary `D` from _Slice_ `s`.",
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["LDDICT", "DROP"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "LDDICTQ": {
    "description": {
      "short": "",
      "long": "A quiet version of `LDDICT`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Int"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "s2",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PLDDICTQ": {
    "description": {
      "short": "",
      "long": "A quiet version of `PLDDICT`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTSET": {
    "description": {
      "short": "",
      "long": "",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTREPLACE": {
    "description": {
      "short": "",
      "long": "",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTADD": {
    "description": {
      "short": "",
      "long": "",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTDEL": {
    "description": {
      "short": "",
      "long": "",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTGETQ": {
    "description": {
      "short": "",
      "long": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, the prefix of `s` is returned as `s'`, and the corresponding value (also a _Slice_) as `x`. The remainder of `s` is returned as a _Slice_ `s''`. If no prefix of `s` is a key in prefix code dictionary `D`, returns the unchanged `s` and a zero flag to indicate failure.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "s2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "s3",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTGET": {
    "description": {
      "short": "",
      "long": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, the prefix of `s` is returned as `s'`, and the corresponding value (also a _Slice_) as `x`. The remainder of `s` is returned as a _Slice_ `s''`. If no prefix of `s` is a key in prefix code dictionary `D`, throws a `Cell` deserialization failure exception.",
      "operands": [],
      "exit_codes": [
        {
          "errno": "6",
          "condition": "No prefix of s is a key in prefix code dictionary D."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s2",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s3",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "PFXDICTGETJMP": {
    "description": {
      "short": "",
      "long": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, `BLESS`es the corresponding value into a _Continuation_ and transfers control to it as if by a `JMPX`. If no prefix of `s` is a key in prefix code dictionary `D`, returns the unchanged `s` and continues execution.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PFXDICTGETEXEC": {
    "description": {
      "short": "",
      "long": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, `BLESS`es the corresponding value into a _Continuation_ and executes it as if by `EXECUTE`. If no prefix of `s` is a key in prefix code dictionary `D`, throws a `Cell` deserialization exception.",
      "operands": [],
      "exit_codes": [
        {
          "errno": "6",
          "condition": "No prefix of s is a key in prefix code dictionary D."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "s2",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "s3",
            "value_types": ["Slice"]
          }
        ]
      }
    }
  },
  "DICTIGETJMP": {
    "description": {
      "short": "",
      "long": "Looks up key represented by a signed (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and transfers control to it as if by a `JMPX`. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETJMP": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and transfers control to it as if by a `JMPX`. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETEXEC": {
    "description": {
      "short": "",
      "long": "Looks up key represented by a signed (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and executes it as if by `EXECUTE`. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETEXEC": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and executes it as if by `EXECUTE`. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETJMPZ": {
    "description": {
      "short": "",
      "long": "Looks up key represented by a signed (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and transfers control to it as if by a `JMPX`. On failure, returns the index `i` and continues execution. This is useful for implementing `switch`/`case` constructions with a default case.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DICTUGETJMPZ": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and transfers control to it as if by a `JMPX`. On failure, returns the index `i` and continues execution. This is useful for implementing `switch`/`case` constructions with a default case.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DICTIGETEXECZ": {
    "description": {
      "short": "",
      "long": "Looks up key represented by a signed (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and executes it as if by `EXECUTE`. On failure, returns the index `i` and continues execution. This is useful for implementing function dispatch with a default handler.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DICTUGETEXECZ": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. On success, `BLESS`es the value found into a continuation and executes it as if by `EXECUTE`. On failure, returns the index `i` and continues execution. This is useful for implementing function dispatch with a default handler.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DICTGET": {
    "description": {
      "short": "",
      "long": "Looks up key `k` (represented by a _Slice_, the first `0 <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys.\nOn success, returns the value found as a _Slice_ `x`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTGETREF": {
    "description": {
      "short": "",
      "long": "Looks up key `k` (represented by a _Slice_, the first `0 <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, applies `LDREF` `ENDS` to the value found, returning a _Cell_ `c` instead of a _Slice_.\nThis operation is useful for dictionaries of type `HashmapE(n,^Y)`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGET": {
    "description": {
      "short": "",
      "long": "Looks up key represented by a signed (big-endian) `n`-bit _Integer_ `i` in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the value found as a _Slice_ `x`. If `i` does not fit into `n` bits, returns `0`.",
      "operands": [],
      "exit_codes": [
        {
          "errno": "5",
          "condition": "Integer is NaN."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETREF": {
    "description": {
      "short": "",
      "long": "Combines `DICTIGET` with `DICTGETREF`: it uses signed `n`-bit _Integer_ `i` as a key and returns a _Cell_ instead of a _Slice_ on success.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGET": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the value found as a _Slice_ `x`. If `i` does not fit into `n` bits, returns `0`.",
      "operands": [],
      "exit_codes": [
        {
          "errno": "5",
          "condition": "Integer is NaN."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETREF": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, applies `LDREF` `ENDS` to the value found, returning a _Cell_ `c` instead of a _Slice_. If `i` does not fit into `n` bits, returns `0`.",
      "operands": [],
      "exit_codes": [
        {
          "errno": "5",
          "condition": "Integer is NaN."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTSET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Slice_), and returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTSETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to a reference to _Cell_ `c`, and returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTISET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x`, and returns the resulting dictionary as `D'`. If `i` does not fit into `n` bits, a range check exception is generated.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTISETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, and returns the resulting dictionary as `D'`. If `i` does not fit into `n` bits, a range check exception is generated.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTUSET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x`, and returns the resulting dictionary as `D'`. If `i` does not fit into `n` bits, a range check exception is generated.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTUSETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, and returns the resulting dictionary as `D'`. If `i` does not fit into `n` bits, a range check exception is generated.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTSETGET": {
    "description": {
      "short": "",
      "long": "Combines `DICTSET` with `DICTGET`: it sets the value corresponding to key `k` to `x`, but also returns the old value `y` associated with the key in question, if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTSETGETREF": {
    "description": {
      "short": "",
      "long": "Combines `DICTSETREF` with `DICTGETREF` similarly to `DICTSETGET`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTISETGET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x`, and returns the resulting dictionary as `D'` along with the old value `y` associated with the key in question, if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTISETGETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, and returns the resulting dictionary as `D'` along with the old value's reference as a _Cell_ if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUSETGET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x`, and returns the resulting dictionary as `D'` along with the old value `y` associated with the key in question, if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUSETGETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, and returns the resulting dictionary as `D'` along with the old value's reference as a _Cell_ if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREPLACE": {
    "description": {
      "short": "",
      "long": "A _Replace_ operation, which is similar to `DICTSET`, but sets the value of key `k` in dictionary `D` to `x` only if the key `k` was already present in `D`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREPLACEREF": {
    "description": {
      "short": "",
      "long": "A _Replace_ counterpart of `DICTSETREF`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREPLACE": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` only if the key `i` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREPLACEREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c` only if the key `i` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREPLACE": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` only if the key `i` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREPLACEREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c` only if the key `i` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREPLACEGET": {
    "description": {
      "short": "",
      "long": "A _Replace_ counterpart of `DICTSETGET`: on success, also returns the old value associated with the key in question.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREPLACEGETREF": {
    "description": {
      "short": "",
      "long": "A _Replace_ counterpart of `DICTSETGETREF`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREPLACEGET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` only if the key `i` was already present in `D`. Returns the resulting dictionary `D'` and the old value associated with the key in question.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREPLACEGETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c` only if the key `i` was already present in `D`. Returns the resulting dictionary `D'` and the old value's reference as a _Cell_.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREPLACEGET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` only if the key `i` was already present in `D`. Returns the resulting dictionary `D'` and the old value associated with the key in question.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREPLACEGETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c` only if the key `i` was already present in `D`. Returns the resulting dictionary `D'` and the old value's reference as a _Cell_.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTADD": {
    "description": {
      "short": "",
      "long": "An _Add_ counterpart of `DICTSET`: sets the value associated with key `k` in dictionary `D` to `x`, but only if it is not already present in `D`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTADDREF": {
    "description": {
      "short": "",
      "long": "An _Add_ counterpart of `DICTSETREF`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIADD": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x`, but only if key `i` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIADDREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, but only if key `i` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUADD": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x`, but only if key `i` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUADDREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, but only if key `i` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTADDGET": {
    "description": {
      "short": "",
      "long": "An _Add_ counterpart of `DICTSETGET`: sets the value associated with key `k` in dictionary `D` to `x`, but only if key `k` is not already present in `D`. Otherwise, just returns the old value `y` without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTADDGETREF": {
    "description": {
      "short": "",
      "long": "An _Add_ counterpart of `DICTSETGETREF`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIADDGET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x`, but only if key `i` is not already present in `D`. Otherwise, returns the old value `y` without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIADDGETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, but only if key `i` is not already present in `D`. Otherwise, returns the old value's reference as a _Cell_ without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUADDGET": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x`, but only if key `i` is not already present in `D`. Otherwise, returns the old value `y` without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUADDGETREF": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to a reference to _Cell_ `c`, but only if key `i` is not already present in `D`. Otherwise, returns the old value's reference as a _Cell_ without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "c2",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTDELGET": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'`, the original value `x` associated with the key `k` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTDELGETREF": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'`, applies `LDREF` `ENDS` to the original value associated with the key `k` so that the value returned `c` is a _Cell_, and returns the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIDELGET": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` from dictionary `D`. If the key is present, returns the modified dictionary `D'`, the original value `x` associated with the key `i` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIDELGETREF": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` from dictionary `D`. If the key is present, returns the modified dictionary `D'`, applies `LDREF` `ENDS` to the original value associated with the key `i` so that the value returned `c` is a _Cell_, and returns the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUDELGET": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` from dictionary `D`. If the key is present, returns the modified dictionary `D'`, the original value `x` associated with the key `i` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUDELGETREF": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` from dictionary `D`. If the key is present, returns the modified dictionary `D'`, applies `LDREF` `ENDS` to the original value associated with the key `i` so that the value returned `c` is a _Cell_, and returns the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTMIN": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTMINREF": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the only reference in the associated value as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIMIN": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, and returns `i` along with the associated value `x`. Notice that the key and value returned may differ from those computed by `DICTMIN` and `DICTUMIN`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIMINREF": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, and returns `i` along with the only reference in the associated value as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUMIN": {
    "description": {
      "short": "",
      "long": "Computes the minimal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the associated value `x`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUMINREF": {
    "description": {
      "short": "",
      "long": "Computes the minimal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the only reference in the associated value as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTMAX": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTMAXREF": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the only reference in the associated value as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIMAX": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, and returns `i` along with the associated value `x`. Notice that the key and value returned may differ from those computed by `DICTMAX` and `DICTUMAX`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIMAXREF": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, and returns `i` along with the only reference in the associated value as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUMAX": {
    "description": {
      "short": "",
      "long": "Computes the maximal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the associated value `x`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUMAXREF": {
    "description": {
      "short": "",
      "long": "Computes the maximal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the only reference in the associated value as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREMMIN": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the associated value `x` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREMMINREF": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the only reference in the associated value as a _Cell_ `c` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREMMIN": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, removes `i` from the dictionary, and returns `i` along with the associated value `x` and the modified dictionary `D'`. Notice that the key and value returned may differ from those computed by `DICTREMMIN` and `DICTUREMMIN`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREMMINREF": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, removes `i` from the dictionary, and returns `i` along with the only reference in the associated value as a _Cell_ `c` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREMMIN": {
    "description": {
      "short": "",
      "long": "Computes the minimal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, removes it from the dictionary, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the associated value `x` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREMMINREF": {
    "description": {
      "short": "",
      "long": "Computes the minimal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, removes it from the dictionary, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the only reference in the associated value as a _Cell_ `c` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREMMAX": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the associated value `x` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREMMAXREF": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the only reference in the associated value as a _Cell_ `c` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "k",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREMMAX": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, removes `i` from the dictionary, and returns `i` along with the associated value `x` and the modified dictionary `D'`. Notice that the key and value returned may differ from those computed by `DICTREMMAX` and `DICTUREMMAX`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREMMAXREF": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `i` in dictionary `D` under the assumption that all keys are big-endian signed `n`-bit integers, removes `i` from the dictionary, and returns `i` along with the only reference in the associated value as a _Cell_ `c` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREMMAX": {
    "description": {
      "short": "",
      "long": "Computes the maximal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, removes it from the dictionary, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the associated value `x` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "x",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREMMAXREF": {
    "description": {
      "short": "",
      "long": "Computes the maximal key in dictionary `D` under the assumption that all keys are big-endian unsigned `n`-bit integers, removes it from the dictionary, and returns the key as an unsigned `n`-bit _Integer_ `i` along with the only reference in the associated value as a _Cell_ `c` and the modified dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  },
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "i",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTSETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Builder_), and returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTISETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), and returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTUSETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), and returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell"]
          }
        ]
      }
    }
  },
  "DICTSETGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Builder_), and returns the resulting dictionary `D'` along with the old value `y` associated with the key in question, if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTISETGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), and returns the resulting dictionary `D'` along with the old value `y` associated with the key in question, if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUSETGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), and returns the resulting dictionary `D'` along with the old value `y` associated with the key in question, if present.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREPLACEB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Builder_) only if the key `k` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREPLACEB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_) only if the key `i` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREPLACEB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_) only if the key `i` was already present in `D`. Returns the resulting dictionary as `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTREPLACEGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Builder_) only if the key `k` was already present in `D`. Returns the resulting dictionary `D'` and the old value associated with the key in question.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIREPLACEGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_) only if the key `i` was already present in `D`. Returns the resulting dictionary `D'` and the old value associated with the key in question.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUREPLACEGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_) only if the key `i` was already present in `D`. Returns the resulting dictionary `D'` and the old value associated with the key in question.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTADDB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Builder_), but only if key `k` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIADDB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), but only if key `i` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUADDB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), but only if key `i` is not already present in `D`. Returns the resulting dictionary `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTADDGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` to value `x` (represented by a _Builder_), but only if key `k` is not already present in `D`. Otherwise, returns the old value `y` without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIADDGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by a (big-endian) signed `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), but only if key `i` is not already present in `D`. Otherwise, returns the old value `y` without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUADDGETB": {
    "description": {
      "short": "",
      "long": "Sets the value associated with `n`-bit key represented by an unsigned (big-endian) `n`-bit integer `i` in dictionary `D` to value `x` (represented by a _Builder_), but only if key `i` is not already present in `D`. Otherwise, returns the old value `y` without changing the dictionary.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Builder"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Cell"]
                  },
                  {
                    "type": "simple",
                    "name": "y",
                    "value_types": ["Slice"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTDEL": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'` and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIDEL": {
    "description": {
      "short": "",
      "long": "A version of `DICTDEL` with the key represented by a signed `n`-bit _Integer_ `i`. If `i` does not fit into `n` bits, simply returns `D` `0` (''key not found, dictionary unmodified'').",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUDEL": {
    "description": {
      "short": "",
      "long": "Deletes `n`-bit key, represented by an unsigned `n`-bit _Integer_ `i`, from dictionary `D`. If the key is present, returns the modified dictionary `D'` and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`. If `i` does not fit into `n` bits, simply returns `D` `0` (''key not found, dictionary unmodified'').",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D",
                    "value_types": ["Slice", "Null"]
                  }
                ]
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "D'",
                    "value_types": ["Cell", "Null"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTGETOPTREF": {
    "description": {
      "short": "",
      "long": "A variant of `DICTGETREF` that returns _Null_ instead of the value `c^?` if the key `k` is absent from dictionary `D`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "DICTIGETOPTREF": {
    "description": {
      "short": "",
      "long": "Looks up key represented by a signed (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. Returns _Null_ if the key `i` is absent from dictionary `D` or if `i` is out of range. Otherwise, returns the value found as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "DICTUGETOPTREF": {
    "description": {
      "short": "",
      "long": "Looks up key represented by an unsigned (big-endian) `n`-bit _Integer_ `i` in dictionary `D`. Returns _Null_ if the key `i` is absent from dictionary `D` or if `i` is out of range. Otherwise, returns the value found as a _Cell_ `c`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "DICTSETGETOPTREF": {
    "description": {
      "short": "",
      "long": "A variant of both `DICTGETOPTREF` and `DICTSETGETREF` that sets the value corresponding to key `k` in dictionary `D` to `c^?` (if `c^?` is _Null_, then the key is deleted instead), and returns the old value `~c^?` (if the key `k` was absent before, returns _Null_ instead).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "c2",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "DICTISETGETOPTREF": {
    "description": {
      "short": "",
      "long": "Sets the value corresponding to key represented by a signed `n`-bit _Integer_ `i` in dictionary `D` to `c^?` (if `c^?` is _Null_, then the key is deleted instead), and returns the old value `~c^?` (if the key `i` was absent before, returns _Null_ instead).",
      "operands": [],
      "exit_codes": [
        {
          "errno": "5",
          "condition": "Integer does not fit into `n` bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "c2",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "DICTUSETGETOPTREF": {
    "description": {
      "short": "",
      "long": "Sets the value corresponding to key represented by an unsigned `n`-bit _Integer_ `i` in dictionary `D` to `c^?` (if `c^?` is _Null_, then the key is deleted instead), and returns the old value `~c^?` (if the key `i` was absent before, returns _Null_ instead).",
      "operands": [],
      "exit_codes": [
        {
          "errno": "5",
          "condition": "Integer does not fit into `n` bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "c2",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "SUBDICTGET": {
    "description": {
      "short": "",
      "long": "Constructs a subdictionary consisting of all keys beginning with prefix `k` (represented by a _Slice_, the first `0 <= l <= n <= 1023` data bits of which are used as a key) of length `l` in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the new subdictionary of the same type `HashmapE(n,X)` as a _Slice_ `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "l",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "SUBDICTIGET": {
    "description": {
      "short": "",
      "long": "Constructs a subdictionary consisting of all keys beginning with prefix represented by a signed big-endian `l`-bit _Integer_ `x` (where necessarily `l <= 257`) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the new subdictionary of the same type `HashmapE(n,X)` as a _Slice_ `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "l",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "SUBDICTUGET": {
    "description": {
      "short": "",
      "long": "Constructs a subdictionary consisting of all keys beginning with prefix represented by an unsigned big-endian `l`-bit _Integer_ `x` (where necessarily `l <= 256`) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the new subdictionary of the same type `HashmapE(n,X)` as a _Slice_ `D'`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "l",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "SUBDICTRPGET": {
    "description": {
      "short": "",
      "long": "Constructs a subdictionary consisting of all keys beginning with prefix `k` (represented by a _Slice_, the first `0 <= l <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. Removes the common prefix from all keys of the new dictionary `D'`, which becomes of type `HashmapE(n-l,X)`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "l",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "SUBDICTIRPGET": {
    "description": {
      "short": "",
      "long": "Constructs a subdictionary consisting of all keys beginning with prefix represented by a signed big-endian `l`-bit _Integer_ `x` (where necessarily `l <= 257`) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. Removes the common prefix from all keys of the new dictionary `D'`, which becomes of type `HashmapE(n-l,X)`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "l",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "SUBDICTURPGET": {
    "description": {
      "short": "",
      "long": "Constructs a subdictionary consisting of all keys beginning with prefix represented by an unsigned big-endian `l`-bit _Integer_ `x` (where necessarily `l <= 256`) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. Removes the common prefix from all keys of the new dictionary `D'`, which becomes of type `HashmapE(n-l,X)`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "l",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D'",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "DICTGETNEXT": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `k'` in dictionary `D` that is lexicographically greater than `k`, and returns `k'` (represented by a _Slice_) along with associated value `x'` (also represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k2",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTGETNEXTEQ": {
    "description": {
      "short": "",
      "long": "Computes the minimal key `k'` in dictionary `D` that is lexicographically greater than or equal to `k`, and returns `k'` (represented by a _Slice_) along with associated value `x'` (also represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k2",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTGETPREV": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `k'` in dictionary `D` that is lexicographically smaller than `k`, and returns `k'` (represented by a _Slice_) along with associated value `x'` (also represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k2",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTGETPREVEQ": {
    "description": {
      "short": "",
      "long": "Computes the maximal key `k'` in dictionary `D` that is lexicographically smaller than or equal to `k`, and returns `k'` (represented by a _Slice_) along with associated value `x'` (also represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "k",
            "value_types": ["Slice"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "k2",
                    "value_types": ["Slice"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETNEXT": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETNEXTEQ": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, computes the minimal key `i'` that is larger than or equal to _Integer_ `i` (which does not necessarily fit into `n` bits), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETPREV": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, computes the maximal key `i'` that is smaller than _Integer_ `i` (which does not necessarily fit into `n` bits), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTIGETPREVEQ": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, computes the maximal key `i'` that is smaller than or equal to _Integer_ `i` (which does not necessarily fit into `n` bits), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETNEXT": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETNEXTEQ": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, computes the minimal key `i'` that is larger than or equal to _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETPREV": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, computes the maximal key `i'` that is smaller than _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTUGETPREVEQ": {
    "description": {
      "short": "",
      "long": "Interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, computes the maximal key `i'` that is smaller than or equal to _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative), and returns `i'` along with associated value `x'` (represented by a _Slice_).",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "x2",
                    "value_types": ["Slice"]
                  },
                  {
                    "type": "simple",
                    "name": "i2",
                    "value_types": ["Int"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "DICTPUSHCONST": {
    "description": {
      "short": "",
      "long": "Pushes a non-empty constant dictionary `D` (as a `Cell^?`) along with its key length `0 <= n <= 1023`, stored as a part of the instruction. The dictionary itself is created from the first of remaining references of the current continuation. In this way, the complete `DICTPUSHCONST` instruction can be obtained by first serializing `xF4A4_`, then the non-empty dictionary itself (one `1` bit and a `Cell` reference), and then the unsigned 10-bit integer `n` (as if by a `STU 10` instruction). An empty dictionary can be pushed by a `NEWDICT` primitive instead.",
      "operands": ["d", "n"]
    },
    "signature": {
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "n",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "PFXDICTSWITCH": {
    "description": {
      "short": "",
      "long": ""
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  }
}
