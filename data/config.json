{
  "NOW": {
    "description": {
      "short": "Returns current Unix timestamp.",
      "long": "Returns the current Unix timestamp in seconds since epoch. This value is taken from the parameter 3 of the c7 tuple.",
      "tags": ["time"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "timestamp",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "BLOCKLT": {
    "description": {
      "short": "Returns current block's logical time.",
      "long": "Returns the logical time of the current block. This value is taken from the parameter 4 of the c7 tuple.",
      "tags": ["time"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "lt",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "LTIME": {
    "description": {
      "short": "Returns current transaction's logical time.",
      "long": "Returns the logical time of the current transaction. This value is taken from the parameter 5 of the c7 tuple.",
      "tags": ["time"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "lt",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "RANDSEED": {
    "description": {
      "short": "Returns current random seed.",
      "long": "Returns the current random seed used for PRNG operations. This value is taken from the parameter 6 of the c7 tuple.",
      "tags": ["random"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "seed",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "BALANCE": {
    "description": {
      "short": "Returns current smart contract balance.",
      "long": "Returns the current balance of the smart contract in nanotons. This value is taken from the parameter 7 of the c7 tuple.",
      "tags": ["balance"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "balance",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "MYADDR": {
    "description": {
      "short": "Returns current smart contract address.",
      "long": "Returns the address of the current smart contract as a _Slice_. This is the same address that is used for sending messages to this contract. This value is taken from the parameter 8 of the c7 tuple.",
      "tags": ["address"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "address",
            "value_types": ["Slice"]
          }
        ],
        "registers": []
      }
    }
  },
  "CONFIGROOT": {
    "description": {
      "short": "Returns global configuration dictionary.",
      "long": "Returns the root cell of the global configuration dictionary. This dictionary contains various blockchain parameters and settings. This value is taken from the parameter 9 of the c7 tuple.",
      "tags": ["config"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "config",
            "value_types": ["Cell"]
          }
        ],
        "registers": []
      }
    }
  },
  "MYCODE": {
    "description": {
      "short": "Returns current smart contract code.",
      "long": "Returns the code of the current smart contract as a _Cell_. This is the same code that is currently being executed. This value is taken from the parameter 10 of the c7 tuple.",
      "tags": ["code"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "value",
            "value_types": ["Cell"]
          }
        ],
        "registers": []
      }
    }
  },
  "INCOMINGVALUE": {
    "description": {
      "short": "Returns value attached to incoming message.",
      "long": "Returns the amount of nanotons attached to the incoming message that initiated this transaction. For external messages and tick-tock transactions returns 0. This value is taken from the parameter 11 of the c7 tuple.",
      "tags": ["message", "value"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "value",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "STORAGEFEES": {
    "description": {
      "short": "Returns accumulated storage fees.",
      "long": "Returns the amount of storage fees that have been accumulated since the last transaction. This value is deducted from the contract's balance during transaction execution. This value is taken from the parameter 12 of the c7 tuple.",
      "tags": ["fees"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "fees",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "PREVBLOCKSINFOTUPLE": {
    "description": {
      "short": "Returns information about previous blocks.",
      "long": "Returns a tuple containing information about previous blocks in the blockchain. This includes masterchain blocks and the previous key block. This value is taken from the parameter 13 of the c7 tuple.",
      "tags": ["block", "info"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "info",
            "value_types": ["Tuple"]
          }
        ],
        "registers": []
      }
    }
  },
  "UNPACKEDCONFIGTUPLE": {
    "description": {
      "short": "Returns unpacked configuration parameters.",
      "long": "Returns a tuple containing unpacked global configuration parameters. This provides easier access to commonly used configuration values without manual dictionary lookup. This value is taken from the parameter 14 of the c7 tuple.",
      "tags": ["config"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "info",
            "value_types": ["Tuple"]
          }
        ],
        "registers": []
      }
    }
  },
  "DUEPAYMENT": {
    "description": {
      "short": "Returns required payment amount.",
      "long": "Returns the amount of nanotons that must be paid for the current operation. This value is taken from the parameter 15 of the c7 tuple.",
      "tags": ["payment"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "payment",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "CONFIGDICT": {
    "description": {
      "short": "",
      "long": "Returns the global configuration dictionary along with its key length (32).",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["CONFIGROOT", "PUSHINT_8 32"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Slice", "Null"]
          },
          {
            "type": "const",
            "value": 32,
            "value_type": "Int"
          }
        ]
      }
    }
  },
  "CONFIGPARAM": {
    "description": {
      "short": "",
      "long": "Returns the value of the global configuration parameter with integer index `i` as a _Cell_ `c`, and a flag to indicate success.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["CONFIGDICT", "DICTIGETREF"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "conditional",
            "name": "status",
            "match": [
              {
                "value": 0,
                "stack": []
              },
              {
                "value": -1,
                "stack": [
                  {
                    "type": "simple",
                    "name": "c",
                    "value_types": ["Cell"]
                  }
                ]
              }
            ]
          },
          {
            "type": "simple",
            "name": "status",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CONFIGOPTPARAM": {
    "description": {
      "short": "",
      "long": "Returns the value of the global configuration parameter with integer index `i` as a _Maybe Cell_ `c^?`.",
      "tags": [],
      "operands": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["CONFIGDICT", "DICTIGETOPTREF"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "c",
            "value_types": ["Cell", "Null"]
          }
        ]
      }
    }
  },
  "PREVMCBLOCKS": {
    "description": {
      "short": "",
      "long": "Retrives `last_mc_blocks` part of `PrevBlocksInfo` from c7 (parameter 13).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "t",
            "value_types": ["Tuple"]
          }
        ]
      }
    }
  },
  "PREVKEYBLOCK": {
    "description": {
      "short": "",
      "long": "Retrives `prev_key_block` part of `PrevBlocksInfo` from c7 (parameter 13).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "t",
            "value_types": ["Tuple"]
          }
        ]
      }
    }
  },
  "PREVMCBLOCKS_100": {
    "description": {
      "short": "",
      "long": "Retrives `last_mc_blocks` part of `PrevBlocksInfo` from c7 (parameter 13).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "t",
            "value_types": ["Tuple"]
          }
        ]
      }
    }
  },
  "GLOBALID": {
    "description": {
      "short": "",
      "long": "Retrieves `global_id` from 19 network config.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETGASFEE": {
    "description": {
      "short": "",
      "long": "Calculates gas fee (amount in nanotoncoin to be paid) for a transaction which consumed `gas_used` gas units.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "gas_used",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "is_mc",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "price",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETSTORAGEFEE": {
    "description": {
      "short": "",
      "long": "Calculates storage fees (amount in nanotoncoin to be paid, only current StoragePrices entry is used) for storing a contract of provided size for `seconds`, `bits` and `cells` represent contract state (`code` + `data`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cells",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "bits",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "seconds",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "is_mc",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "price",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETFORWARDFEE": {
    "description": {
      "short": "",
      "long": "Calculates amount of nanotoncoin that must be paid to send a message of the specified size.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cells",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "bits",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "is_mc",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "price",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETPRECOMPILEDGAS": {
    "description": {
      "short": "",
      "long": "Returns gas usage for the current contract if it is precompiled, `null` otherwise.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETORIGINALFWDFEE": {
    "description": {
      "short": "",
      "long": "Calculate `fwd_fee * 2^16 / first_frac`. Can be used to get the original `fwd_fee` of the message.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "fwd_fee",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "is_mc",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "orig_fwd_fee",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETGASFEESIMPLE": {
    "description": {
      "short": "",
      "long": "Same as `GETGASFEE`, but without flat price (just `(gas_used * price) / 2^16)`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "gas_used",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "is_mc",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "price",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETFORWARDFEESIMPLE": {
    "description": {
      "short": "",
      "long": "Same as `GETFORWARDFEE`, but without lump price (just (`bits*bit_price + cells*cell_price) / 2^16`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cells",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "bits",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "is_mc",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "price",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "GETPARAM": {
    "description": {
      "short": "",
      "long": "Returns the `i`-th parameter from the _Tuple_ provided at `c7`.",
      "tags": [],
      "operands": ["i"],
      "exit_codes": [
        {
          "errno": "7",
          "condition": "Value in `c7` is not a Tuple."
        },
        {
          "errno": "5",
          "condition": "Index `i` is greater than or equal to tuple from `c7` length."
        }
      ],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["PUSHCTR c7", "INDEX 0", "INDEX [i]"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Any"]
          }
        ]
      }
    }
  },
  "GETPARAMLONG": {
    "description": {
      "short": "Gets a parameter from the c7 tuple with extended range.",
      "long": "Same as `i GETPARAM`, but `i` is in range `[0..254]`.",
      "tags": [],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "param_value",
            "value_types": ["Any"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSGPARAMS": {
    "description": {
      "short": "Returns the tuple with inbound message parameters.",
      "long": "Returns the 17th element of the c7 tuple, which contains inbound message parameters. The tuple includes: bounce (boolean), bounced (boolean), src_addr (slice), fwd_fee (int), created_lt (int), created_at (int), orig_value (int), value (int), value_extra (cell or null), state_init (cell or null). For external messages, tick-tock transactions and get methods: bounce, bounced, fwd_fee, created_lt, created_at, orig_value, value are 0, value_extra is null. For tick-tock transactions and get methods: src_addr is addr_none.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "msg_params",
            "value_types": ["Tuple"]
          }
        ],
        "registers": []
      }
    }
  },
  "GETPARAMLONG2": {
    "description": {
      "short": "Gets a parameter from the c7 tuple with extended range.",
      "long": "Same as `i GETPARAM`, but `i` is in range `[0..254]`.",
      "tags": [],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 7
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "param_value",
            "value_types": ["Any"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_BOUNCE": {
    "description": {
      "short": "Returns the bounce field from the inbound message parameters.",
      "long": "Alias for `0 INMSGPARAM`. Returns the `bounce` field (boolean) from the inbound message parameters tuple.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "bounce",
            "value_types": ["Bool"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_BOUNCED": {
    "description": {
      "short": "Returns the bounced field from the inbound message parameters.",
      "long": "Alias for `1 INMSGPARAM`. Returns the `bounced` field (boolean) from the inbound message parameters tuple.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "bounced",
            "value_types": ["Bool"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_SRC": {
    "description": {
      "short": "Returns the source address from the inbound message parameters.",
      "long": "Alias for `2 INMSGPARAM`. Returns the `src_addr` field (slice) from the inbound message parameters tuple. For tick-tock transactions and get methods, this is addr_none.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "src",
            "value_types": ["Slice"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_FWDFEE": {
    "description": {
      "short": "Returns the forward fee from the inbound message parameters.",
      "long": "Alias for `3 INMSGPARAM`. Returns the `fwd_fee` field (int) from the inbound message parameters tuple. For external messages, tick-tock transactions and get methods, this is 0.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "fwd_fee",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_LT": {
    "description": {
      "short": "Returns the logical time from the inbound message parameters.",
      "long": "Alias for `4 INMSGPARAM`. Returns the `created_lt` field (int) from the inbound message parameters tuple. For external messages, tick-tock transactions and get methods, this is 0.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "created_lt",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_UTIME": {
    "description": {
      "short": "Returns the creation time from the inbound message parameters.",
      "long": "Alias for `5 INMSGPARAM`. Returns the `created_at` field (int) from the inbound message parameters tuple. For external messages, tick-tock transactions and get methods, this is 0.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "created_at",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_ORIGVALUE": {
    "description": {
      "short": "Returns the original value from the inbound message parameters.",
      "long": "Alias for `6 INMSGPARAM`. Returns the `orig_value` field (int) from the inbound message parameters tuple. This is sometimes different from the value in `INCOMINGVALUE` and TVM stack because of storage fees. For external messages, tick-tock transactions and get methods, this is 0.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "orig_value",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_VALUE": {
    "description": {
      "short": "Returns the value from the inbound message parameters.",
      "long": "Alias for `7 INMSGPARAM`. Returns the `value` field (int) from the inbound message parameters tuple. This is the same as in `INCOMINGVALUE` and TVM stack. For external messages, tick-tock transactions and get methods, this is 0.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "value",
            "value_types": ["Int"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_VALUEEXTRA": {
    "description": {
      "short": "Returns the extra value from the inbound message parameters.",
      "long": "Alias for `8 INMSGPARAM`. Returns the `value_extra` field (cell or null) from the inbound message parameters tuple. This is the same as in `INCOMINGVALUE`. For external messages, tick-tock transactions and get methods, this is null.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "value_extra",
            "value_types": ["Cell", "Null"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSG_STATEINIT": {
    "description": {
      "short": "Returns the state init from the inbound message parameters.",
      "long": "Alias for `9 INMSGPARAM`. Returns the `state_init` field (cell or null) from the inbound message parameters tuple.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "state_init",
            "value_types": ["Cell", "Null"]
          }
        ],
        "registers": []
      }
    }
  },
  "INMSGPARAM": {
    "description": {
      "short": "",
      "long": "Returns a specific parameter from the inbound message parameters tuple.",
      "tags": [],
      "operands": ["x"],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["INMSGPARAMS", "INDEX [x]"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "param_value",
            "value_types": ["Any"]
          }
        ],
        "registers": []
      }
    }
  }
}
