{
  "TRY": {
    "description": {
      "short": "Executes `body` and if it throws an exception, transfers control to `handler`.",
      "long": "Sets `c2` to `handler`, first saving the old value of `c2` both into the savelist of `handler` and into the savelist of the current continuation `cc`, which is stored into `body.c0` and `handler.c0`. Then performs `EXECUTE` on `body` continuation. If `body` does not throw any exceptions, the original value of `c2` is automatically restored on return from `body`. If an exception occurs, the execution is transferred to `handler`, but the original value of `c2` is restored in the process, so that `handler` can re-throw the exception by `THROWANY` if it cannot handle it by itself.",
      "tags": ["exception_handling", "control_flow"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "body",
            "value_types": ["Continuation"]
          },
          {
            "type": "simple",
            "name": "handler",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                },
                "c1": {
                  "type": "register",
                  "index": 1
                },
                "c2": {
                  "type": "register",
                  "index": 2
                }
              }
            },
            "c2": {
              "type": "variable",
              "var_name": "c'",
              "save": {
                "c0": {
                  "type": "cc",
                  "save": {
                    "c0": {
                      "type": "register",
                      "index": 0
                    },
                    "c1": {
                      "type": "register",
                      "index": 1
                    },
                    "c2": {
                      "type": "register",
                      "index": 2
                    }
                  }
                },
                "c2": {
                  "type": "register",
                  "index": 2
                }
              }
            }
          }
        }
      ]
    }
  },
  "THROWANY": {
    "description": {
      "short": "Throws an exception with error code `num` and parameter set to zero. Parameter represents the additional information passed to the exception handler.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["ZERO", "SWAP", "THROWARGANY"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "num",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWARGANY": {
    "description": {
      "short": "Throws an exception with error code `num` and parameter set to `x`. Parameter represents the additional information passed to the exception handler.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["PUSHCTR 2", "JMPXARGS 2"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "num",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWANYIFNOT": {
    "description": {
      "short": "Throws an exception with error code `num` and parameter set to zero only if `cond` is EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "num",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWARGANYIFNOT": {
    "description": {
      "short": "Throws an exception with error code `num` and parameter set to `x` taken from the stack only if `cond` is EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "num",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "TRYARGS": {
    "description": {
      "short": "Executes `body` with `p` top elements from the stack and if it throws an exception, transfers control to `handler`, otherwise copies the top `r` stack elements of the resulting stack of `body` as return values.",
      "long": "This instruction is similar to `TRY`, but with `[p] [r] CALLXARGS` internally used instead of `EXECUTE`.\nIn this way, all but the top `p` stack elements will be saved into current continuation's stack, and then restored upon return from either `body` or `handler`, with the top `0 <= r <= 15` values of the resulting stack of `body` or `handler` copied as return values.",
      "tags": ["exception_handling", "control_flow"],
      "operands": ["p", "r"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "array",
            "name": "args",
            "length_var": "p",
            "array_entry": [
              {
                "type": "simple",
                "name": "arg"
              }
            ]
          },
          {
            "type": "simple",
            "name": "body",
            "value_types": ["Continuation"]
          },
          {
            "type": "simple",
            "name": "handler",
            "value_types": ["Continuation"]
          }
        ]
      }
    },
    "control_flow": {
      "branches": [
        {
          "type": "variable",
          "var_name": "c",
          "save": {
            "c0": {
              "type": "cc",
              "save": {
                "c0": {
                  "type": "register",
                  "index": 0
                },
                "c1": {
                  "type": "register",
                  "index": 1
                },
                "c2": {
                  "type": "register",
                  "index": 2
                }
              }
            },
            "c2": {
              "type": "variable",
              "var_name": "c'",
              "save": {
                "c0": {
                  "type": "cc",
                  "save": {
                    "c0": {
                      "type": "register",
                      "index": 0
                    },
                    "c1": {
                      "type": "register",
                      "index": 1
                    },
                    "c2": {
                      "type": "register",
                      "index": 2
                    }
                  }
                },
                "c2": {
                  "type": "register",
                  "index": 2
                }
              }
            }
          }
        }
      ]
    }
  },
  "THROWARG": {
    "description": {
      "short": "Throws an exception with exit code `x` taken from the stack.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWARGIF": {
    "description": {
      "short": "Conditionally throws an exception with error code `x` taken from stack if `cond` is NOT EQUAL to 0.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWARGIFNOT": {
    "description": {
      "short": "Conditionally throws an exception with error code `x` taken from stack if `cond` is EQUAL to 0.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWANYIF": {
    "description": {
      "short": "Throws an exception with error code `num` and parameter set to zero only if `cond` is NOT EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "num",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWARGANYIF": {
    "description": {
      "short": "Throws an exception with error code `num` and parameter set to `x` taken from the stack only if `cond` is NOT EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "num",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROW_SHORT": {
    "description": {
      "short": "Throws an exception with error code `num`.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "THROW": {
    "description": {
      "short": "Throws an exception with error code `num`.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "THROWIF_SHORT": {
    "description": {
      "short": "Conditionally throws an exception with error code `num` if `cond` is NOT EQUAL to 0.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWIF": {
    "description": {
      "short": "Conditionally throws an exception with error code `num` if `cond` is NOT EQUAL to 0.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWIFNOT_SHORT": {
    "description": {
      "short": "Conditionally throws an exception with error code `num` if `cond` is EQUAL to 0.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "THROWIFNOT": {
    "description": {
      "short": "Conditionally throws an exception with error code `num` if `cond` is EQUAL to 0.",
      "long": "",
      "tags": ["exception_handling", "throw", "control_flow"],
      "operands": ["num"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "cond",
            "value_types": ["Int"]
          }
        ]
      }
    }
  }
}
