{
  "DEBUGSTR": {
    "description": {
      "short": "",
      "long": "Outputs passed string to debug logs.",
      "tags": [],
      "operands": ["s"],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "",
              "comment": "Outputs \"hello world\" to logs"
            },
            {
              "instruction": "DEBUGSTR \"hello world\"",
              "comment": ""
            }
          ],
          "stack": {
            "input": [],
            "output": []
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DUMPSTK": {
    "description": {
      "short": "Dumps the entire contents of the stack to debug logs.",
      "long": "Outputs the entire contents of the stack to debug logs without modifying the stack. Useful for debugging and stack inspection.",
      "tags": ["debug", "stack"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DEBUG": {
    "description": {
      "short": "Base instruction for debugging purposes.",
      "long": "- With `i=0` and `j=0` this instruction outputs the entire stack as `DUMPSTK`.\n\n- With `i=1` and `j=4` this instruction outputs the string taken from the top of the stack as `STRDUMP`.\n\n- With `i=2` and any `j` this instruction dumps a slice with length divisible by 8 from `j`-th element of the stack as a string as `DUMP`.",
      "tags": [],
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "STRDUMP": {
    "description": {
      "short": "Dumps slice value as a UTF-8 encoded string to debug logs.",
      "long": "Takes a string value as a slice from the stack and outputs it to debug logs. The string is interpreted as a UTF-8 encoded text.",
      "tags": ["debug", "string"],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "str",
            "value_types": ["Slice"]
          }
        ],
        "registers": []
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "str",
            "value_types": ["Slice"]
          }
        ],
        "registers": []
      }
    }
  },
  "DEBUG_1": {
    "description": {
      "short": "",
      "long": "Padding instruction that does nothing.",
      "tags": [],
      "operands": ["t"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DUMP": {
    "description": {
      "short": "Dumps a `i`-th value from stack to debug logs.",
      "long": "Takes a value from the stack at position `i` and outputs it to debug logs. The value is formatted according to its type.",
      "tags": ["debug", "stack"],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DEBUG_2": {
    "description": {
      "short": "",
      "long": "Padding instruction that does nothing.",
      "tags": [],
      "operands": ["t"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  }
}
