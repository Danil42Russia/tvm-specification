{
  "NOP": {
    "description": {
      "short": "",
      "long": "Does nothing.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "SWAP": {
    "description": {
      "short": "",
      "long": "Exchanges the top two stack items. Takes two elements from the stack and pushes them back in reverse order.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "SWAP",
              "comment": "Swaps the top two elements (1 and 2)"
            }
          ],
          "stack": {
            "input": ["1", "2"],
            "output": ["2", "1"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DUP": {
    "description": {
      "short": "",
      "long": "Duplicates the top stack item. Copies the top element of the stack and pushes the copy on top of the stack.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack is empty."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 42"
            },
            {
              "instruction": "DUP",
              "comment": "Duplicates the top element (42)"
            }
          ],
          "stack": {
            "input": ["42"],
            "output": ["42", "42"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "OVER": {
    "description": {
      "short": "",
      "long": "Copies the second stack item to the top. Takes the second element from the stack and pushes a copy of it on top of the stack, leaving the original element in place.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "OVER",
              "comment": "Copies the second element (1) to the top of the stack"
            }
          ],
          "stack": {
            "input": ["1", "2"],
            "output": ["1", "2", "1"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DROP": {
    "description": {
      "short": "",
      "long": "Removes the top element from the stack. Discards the top element without using it.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack is empty."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "DROP",
              "comment": "Removes the top element (2) from the stack"
            }
          ],
          "stack": {
            "input": ["1", "2"],
            "output": ["1"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "NIP": {
    "description": {
      "short": "",
      "long": "Removes the second element from the stack.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "NIP",
              "comment": "Removes the second element (1) from the stack"
            }
          ],
          "stack": {
            "input": ["1", "2"],
            "output": ["2"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "ROT": {
    "description": {
      "short": "",
      "long": "Rearranges the top three elements. Moves the third element to the top of the stack: `1 2 3 -> 2 3 1`",
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["1 2 BLKSWAP"]
        },
        {
          "exact": true,
          "instructions": ["s2 s1 XCHG2"]
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "ROT",
              "comment": "Rotates the top three elements: (1,2,3) -> (2,3,1)"
            }
          ],
          "stack": {
            "input": ["1", "2", "3"],
            "output": ["2", "3", "1"]
          }
        }
      ],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "ROTREV": {
    "description": {
      "short": "",
      "long": "Rearranges the top three elements. Places the top element below the first two following elements.: `1 2 3 -> 3 1 2`",
      "operands": [],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["2 1 BLKSWAP"]
        },
        {
          "exact": true,
          "instructions": ["s2 s2 XCHG2"]
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "ROTREV",
              "comment": "Rotates in reverse the top three elements: (1,2,3) -> (3,1,2)"
            }
          ],
          "stack": {
            "input": ["1", "2", "3"],
            "output": ["3", "1", "2"]
          }
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PICK": {
    "description": {
      "short": "",
      "long": "Pops integer `i` from the stack, then performs `s[i] PUSH`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "ROLL": {
    "description": {
      "short": "",
      "long": "Takes integer `x` from the top of the stack and moves the `x`-th element from the top to the top of the stack. For example, `ROLL 2` is equivalent to `ROT` (`1 2 3 -> 2 3 1`).",
      "operands": [],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "PUSHINT_4 2",
              "comment": "Push x=2 for ROLL"
            },
            {
              "instruction": "ROLL",
              "comment": "Moves third element (1) to the top: (1,2,3) -> (2,3,1)"
            }
          ],
          "stack": {
            "input": ["1", "2", "3", "2"],
            "output": ["2", "3", "1"]
          }
        }
      ],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 1 element."
        },
        {
          "errno": "7",
          "condition": "Top element is not an `Int`."
        },
        {
          "errno": "5",
          "condition": "Integer is out of range."
        },
        {
          "errno": "2",
          "condition": "Stack contains less than `x + 1` elements."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "ROLLREV": {
    "description": {
      "short": "",
      "long": "Takes integer `x` from the top of the stack and moves the top element to position `x` from the top. For example, `ROLLREV 2` is equivalent to `ROTREV` (`1 2 3 -> 3 1 2`).",
      "operands": [],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "PUSHINT_4 2",
              "comment": "Push x=2 for ROLLREV"
            },
            {
              "instruction": "ROLLREV",
              "comment": "Moves top element (3) to position 2: (1,2,3) -> (3,1,2)"
            }
          ],
          "stack": {
            "input": ["1", "2", "3", "2"],
            "output": ["3", "1", "2"]
          }
        }
      ],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 1 element."
        },
        {
          "errno": "7",
          "condition": "Top element is not an `Int`."
        },
        {
          "errno": "5",
          "condition": "Integer is out of range."
        },
        {
          "errno": "2",
          "condition": "Stack contains less than `x + 1` elements."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "BLKSWX": {
    "description": {
      "short": "",
      "long": "Pops integers `i`,`j` from the stack, then performs `[i] [j] BLKSWAP`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "REVX": {
    "description": {
      "short": "",
      "long": "Pops integers `i`,`j` from the stack, then performs `[i] [j] REVERSE`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DROPX": {
    "description": {
      "short": "",
      "long": "Pops integer `i` from the stack, then performs `[i] BLKDROP`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "TUCK": {
    "description": {
      "short": "",
      "long": "Equivalent to `SWAP` `OVER` or to `s1 s1 XCPU`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHGX": {
    "description": {
      "short": "",
      "long": "Pops integer `i` from the stack, then performs `s[i] XCHG`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "DEPTH": {
    "description": {
      "short": "",
      "long": "Pushes the current depth of the stack.",
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "DEPTH",
              "comment": "Pushes the current stack depth (3) onto the stack"
            }
          ],
          "stack": {
            "input": ["1", "2", "3"],
            "output": ["1", "2", "3", "3"]
          }
        }
      ],
      "operands": []
    },
    "signature": {
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "depth",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "CHKDEPTH": {
    "description": {
      "short": "",
      "long": "Pops integer `i` from the stack, then checks whether there are at least `i` elements, generating a stack underflow exception otherwise.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "i",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "ONLYTOPX": {
    "description": {
      "short": "",
      "long": "Pops integer `i` from the stack, then removes all but the top `i` elements.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "ONLYX": {
    "description": {
      "short": "",
      "long": "Pops integer `i` from the stack, then leaves only the bottom `i` elements.",
      "operands": [],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["DEPTH", "SWAP", "SUB", "DROPX"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "BLKDROP": {
    "description": {
      "short": "",
      "long": "Removes the top `i` elements from the stack. Equivalent to `DROP` performed `i` times.",
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XC2PU": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] s[j] XCHG2` `s[k] PUSH`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCPU2": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] XCHG0` `s[j] s[k] PUSH2`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUSH3": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] PUSH` `s[j+1] s[k+1] PUSH2`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG2": {
    "description": {
      "short": "",
      "long": "Equivalent to `s1 s[i] XCHG` `s[j] XCHG0`.",
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCPU": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] XCHG0` `s[j] PUSH`.",
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUSH2": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] PUSH` `s[j+1] PUSH`.",
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUXC": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] PUSH` `SWAP` `s[j] XCHG0`.",
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCPUXC": {
    "description": {
      "short": "",
      "long": "Equivalent to `s1 s[i] XCHG` `s[j] s[k-1] PUXC`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUXC2": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] PUSH` `s2 XCHG0` `s[j] s[k] XCHG2`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUXCPU": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] s[j-1] PUXC` `s[k] PUSH`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PU2XC": {
    "description": {
      "short": "",
      "long": "Equivalent to `s[i] PUSH` `SWAP` `s[j] s[k-1] PUXC`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "BLKSWAP": {
    "description": {
      "short": "",
      "long": "Permutes two blocks `s[j+i+1] ... s[j+1]` and `s[j] ... s0`.",
      "operands": ["i", "j"],
      "other_implementations": [
        {
          "exact": false,
          "instructions": ["[i+1] [j+1] REVERSE", "[j+1] 0 REVERSE", "[i+j+2] 0 REVERSE"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "REVERSE": {
    "description": {
      "short": "",
      "long": "Reverses the order of `s[j+i+1] ... s[j]`.",
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "BLKPUSH": {
    "description": {
      "short": "",
      "long": "Equivalent to `PUSH s(j)` performed `i` times.",
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "BLKDROP2": {
    "description": {
      "short": "",
      "long": "Drops `i` stack elements under the top `j` elements.",
      "operands": ["i", "j"],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["[i+j] 0 REVERSE", "[i] BLKDROP", "[j] 0 REVERSE"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "2SWAP": {
    "description": {
      "short": "",
      "long": "Equivalent to `2 2 BLKSWAP` or to `s3 s2 XCHG2`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "2DROP": {
    "description": {
      "short": "",
      "long": "Equivalent to `DROP` `DROP`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "2DUP": {
    "description": {
      "short": "",
      "long": "Equivalent to `s1 s0 PUSH2`.",
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "DUP2",
              "comment": "Duplicates the top two elements (1,2) and pushes them onto the stack"
            }
          ],
          "stack": {
            "input": ["1", "2"],
            "output": ["1", "2", "1", "2"]
          }
        }
      ],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "2OVER": {
    "description": {
      "short": "",
      "long": "Equivalent to `s3 s2 PUSH2`.",
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG3": {
    "description": {
      "short": "",
      "long": "Equivalent to `s2 s[i] XCHG` `s1 s[j] XCHG` `s[k] XCHG0`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG3_ALT": {
    "description": {
      "short": "",
      "long": "Long form of `XCHG3`.",
      "operands": ["i", "j", "k"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG_0I_LONG": {
    "description": {
      "short": "Interchanges top element with element at index `i`.",
      "long": "This instruction is equivalent to `XCHG_0I` except that it operates on a integer value with bigger range.",
      "tags": ["stack"],
      "related_instructions": ["XCHG_0I"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG_0I": {
    "description": {
      "short": "Interchanges top element with element at index `i`.",
      "related_instructions": ["XCHG_0I_LONG"],
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "XCHG_0I s2",
              "comment": "Swaps top element (3) with element at index 2 (1)"
            }
          ],
          "stack": {
            "input": ["1", "2", "3"],
            "output": ["3", "2", "1"]
          }
        },
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "XCHG_0I s5",
              "comment": "Trying to swap with an element at index 5, which doesn't exist"
            }
          ],
          "exit_code": 2,
          "stack": {
            "input": ["1", "2"],
            "output": ["1", "2"]
          }
        }
      ],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG_IJ": {
    "description": {
      "short": "Interchanges elements at indices `i` and `j`.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i` or `j`"
        }
      ],
      "operands": ["i", "j"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "XCHG_1I": {
    "description": {
      "short": "Interchanges second element with element at index `i`.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack is empty."
        },
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUSH": {
    "description": {
      "short": "Copy value of `s(i)` and pushes it onto the stack.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSH s1",
              "comment": "Pushes 1 onto the stack."
            }
          ],
          "stack": {
            "input": ["1", "2"],
            "output": ["1", "2", "1"]
          }
        },
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSH s10",
              "comment": "Trying to push a value from an index that is out of bounds."
            }
          ],
          "exit_code": 2,
          "stack": {
            "input": ["1", "2"],
            "output": ["1", "2"]
          }
        }
      ],
      "related_instructions": ["PUSH_LONG"],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "PUSH_LONG": {
    "description": {
      "short": "Copy value of `s(i)` and pushes it onto the stack.",
      "long": "Copy value of `s(i)` and pushes it onto the stack. This instruction is equivalent to `PUSH` except that it operates on a integer value with bigger range.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "related_instructions": ["PUSH"],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "POP": {
    "description": {
      "short": "Removes the top element from the stack and stores it in `s(i)`. If `i` equal to 0, POP is effectively a `DROP`, i.e. the top element is removed from the stack.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "examples": [
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "PUSHINT_4 2"
            },
            {
              "instruction": "PUSHINT_4 3"
            },
            {
              "instruction": "POP s2",
              "comment": "Removes top element (3) and stores it in position s2, replacing the value 1"
            }
          ],
          "stack": {
            "input": ["1", "2", "3"],
            "output": ["3", "2"]
          }
        },
        {
          "instructions": [
            {
              "instruction": "PUSHINT_4 1"
            },
            {
              "instruction": "POP s3",
              "comment": "Trying to pop to an index that is out of bounds"
            }
          ],
          "exit_code": 2,
          "stack": {
            "input": ["1"],
            "output": ["1"]
          }
        }
      ],
      "related_instructions": ["POP_LONG"],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  },
  "POP_LONG": {
    "description": {
      "short": "Removes the top element from the stack and stores it in `s(i).`",
      "long": "Removes the top element from the stack and stores it in `s(i)`. If `i` equal to 0, `POP_LONG` is effectively a `DROP`, i.e. the top element is removed from the stack. This instruction is equivalent to `POP` except that it operates on a integer value with bigger range.",
      "tags": ["stack"],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Count of elements on the stack is less or equal to `i`"
        }
      ],
      "related_instructions": ["POP"],
      "operands": ["i"]
    },
    "signature": {
      "inputs": {
        "stack": [],
        "registers": []
      },
      "outputs": {
        "stack": [],
        "registers": []
      }
    }
  }
}
